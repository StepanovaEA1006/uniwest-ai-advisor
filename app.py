# app.py - –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è –° –£–õ–£–ß–®–ï–ù–ù–´–ú –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï–ú –ü–û–î–ü–ò–°–û–ö

import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
import plotly.express as px
from datetime import datetime
import hashlib

# advanced_analysis.py - —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä—è–º–æ –≤ app.py
import numpy as np
import pandas as pd
from typing import Dict, List, Optional, Tuple
import streamlit as st

class AdvancedPortfolioAnalysis:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
    
    def __init__(self, portfolio_dict: Dict[str, float], client_name: str = "–î–µ–º–æ –ö–ª–∏–µ–Ω—Ç"):
        self.portfolio_dict = portfolio_dict
        self.client_name = client_name
        
    def comprehensive_analysis(self) -> Dict:
        """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑"""
        return {
            'basic_metrics': {
                'annual_return': 0.12,
                'annual_volatility': 0.18,
                'sharpe_ratio': 0.67,
                'max_drawdown': -0.15,
                'client_name': self.client_name,
                'subscription_level': 'basic'
            },
            'risk_metrics': {
                'parametric_var': -0.025,
                'cvar': -0.035,
                'downside_deviation': 0.08,
                'worst_day': -0.05,
                'access_restricted': False
            },
            'recommendations': [
                f"üìä –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è {self.client_name}",
                "üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è",
                "üìà –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞—â–∏—Ç–Ω—ã—Ö –∞–∫—Ç–∏–≤–æ–≤"
            ]
        }
    
    def calculate_basic_metrics(self) -> Dict:
        """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫"""
        return {
            'annual_return': 0.12,
            'annual_volatility': 0.18,
            'sharpe_ratio': 0.67,
            'max_drawdown': -0.15,
            'sortino_ratio': 0.75,
            'calmar_ratio': 0.80,
            'client_name': self.client_name
        }
    
    def calculate_risk_metrics(self, confidence_level: float = 0.95) -> Dict:
        """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ä–∏—Å–∫–æ–≤"""
        return {
            'parametric_var': -0.025,
            'historical_var': -0.020,
            'cvar': -0.035,
            'downside_deviation': 0.08,
            'worst_day': -0.05,
            'confidence_level': confidence_level,
            'access_restricted': False
        }

def display_portfolio_analysis(results: Dict) -> None:
    """–£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞"""
    if not results:
        st.error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return
    
    metrics = results.get('basic_metrics', {})
    
    if not metrics:
        st.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏")
        return
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("–ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å", f"{metrics.get('annual_return', 0):.1%}")
    
    with col2:
        st.metric("–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å", f"{metrics.get('annual_volatility', 0):.1%}")
    
    with col3:
        st.metric("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞", f"{metrics.get('sharpe_ratio', 0):.2f}")
    
    with col4:
        st.metric("–ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞", f"{metrics.get('max_drawdown', 0):.1%}")
    
    # –ú–µ—Ç—Ä–∏–∫–∏ —Ä–∏—Å–∫–∞
    risk_metrics = results.get('risk_metrics', {})
    if risk_metrics and not risk_metrics.get('access_restricted', True):
        st.subheader("üìâ –ú–µ—Ç—Ä–∏–∫–∏ —Ä–∏—Å–∫–∞")
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("VaR (95%)", f"{risk_metrics.get('parametric_var', 0):.2%}")
        
        with col2:
            st.metric("CVaR", f"{risk_metrics.get('cvar', 0):.2%}")
        
        with col3:
            st.metric("Downside Dev", f"{risk_metrics.get('downside_deviation', 0):.2%}")
        
        with col4:
            st.metric("Worst Day", f"{risk_metrics.get('worst_day', 0):.2%}")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    st.subheader("üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    for recommendation in results.get('recommendations', []):
        st.write(recommendation)

# –ò–ú–ü–û–†–¢–ò–†–£–ï–ú –§–£–ù–ö–¶–ò–ò –ò–ó database.py
from database import (
    get_all_clients, 
    get_client_details, 
    get_portfolio_by_client, 
    generate_subscription_based_recommendations,
    get_subscription_level,
    get_subscription_details,
    can_access_advanced_analytics,
    can_access_premium_features,
    SUBSCRIPTION_FEATURES
)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É Streamlit
st.set_page_config(
    page_title="–Æ–Ω–∏–í–µ—Å—Ç - AI –°–æ–≤–µ—Ç–Ω–∏–∫ –ø–æ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

def hash_password(password):
    """–•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è"""
    return hashlib.sha256(password.encode()).hexdigest()

def init_session_state():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏"""
    if 'authenticated' not in st.session_state:
        st.session_state.authenticated = False
    if 'current_user' not in st.session_state:
        st.session_state.current_user = None
    if 'current_page' not in st.session_state:
        st.session_state.current_page = "üìä –î–∞—à–±–æ—Ä–¥"

def display_subscription_badge(subscription_level: str) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π –±–µ–π–¥–∂ –ø–æ–¥–ø–∏—Å–∫–∏"""
    badges = {
        'trial': 'üéÅ <span style="background: linear-gradient(135deg, #667eea, #764ba2); color: white; padding: 4px 12px; border-radius: 20px; font-size: 0.8em; font-weight: bold;">–ü–†–û–ë–ù–´–ô</span>',
        'basic': 'üìä <span style="background: linear-gradient(135deg, #11998e, #38ef7d); color: white; padding: 4px 12px; border-radius: 20px; font-size: 0.8em; font-weight: bold;">–ë–ê–ó–û–í–´–ô</span>',
        'advanced': 'üéØ <span style="background: linear-gradient(135deg, #fc466b, #3f5efb); color: white; padding: 4px 12px; border-radius: 20px; font-size: 0.8em; font-weight: bold;">–ü–†–û–î–í–ò–ù–£–¢–´–ô</span>',
        'premium': 'üíé <span style="background: linear-gradient(135deg, #ffd700, #ff8c00); color: black; padding: 4px 12px; border-radius: 20px; font-size: 0.8em; font-weight: bold;">–ü–†–ï–ú–ò–£–ú</span>'
    }
    return badges.get(subscription_level, badges['trial'])

def login_page():
    """–ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞ –° –ò–ù–§–û–†–ú–ê–¶–ò–ï–ô –û –ü–û–î–ü–ò–°–ö–ê–•"""
    st.markdown("""
    <style>
        .login-container {
            max-width: 90%;
            width: 400px;
            margin: 10vh auto;
            padding: 2rem;
            background: white;
            border-radius: 20px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            text-align: center;
        }
        .main-title {
            font-size: clamp(2rem, 5vw, 2.8rem);
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            margin-bottom: 0.5rem;
            font-weight: bold;
        }
        .subtitle {
            color: #666;
            margin-bottom: 2rem;
            font-size: clamp(1rem, 3vw, 1.2rem);
        }
    </style>
    """, unsafe_allow_html=True)
    
    st.markdown("""
    <div style='display: flex; justify-content: center; align-items: center; min-height: 80vh; padding: 1rem;'>
        <div class="login-container">
            <h1 class="main-title">ü§ñ –Æ–Ω–∏–í–µ—Å—Ç</h1>
            <div class="subtitle">AI –°–æ–≤–µ—Ç–Ω–∏–∫ –ø–æ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º</div>
    """, unsafe_allow_html=True)
    
    clients = get_all_clients()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –∏—Ö –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
    selected_client = st.selectbox(
        "üë§ –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞:",
        clients,
        format_func=lambda x: f"{x} - {get_subscription_details(x)['name']} ({get_subscription_details(x)['price']} —Ä—É–±/–º–µ—Å)",
        index=0
    )
    
    password = st.text_input("üîí –ü–∞—Ä–æ–ª—å:", type="password", value="demo123")
    
    if st.button("üöÄ –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É", use_container_width=True, type="primary"):
        if password == "demo123":
            st.session_state.authenticated = True
            st.session_state.current_user = selected_client
            st.rerun()
        else:
            st.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'demo123'")
    
    st.markdown("""
            <div style="margin-top: 2rem; padding: 1rem; background: #f8f9fa; border-radius: 10px;">
                <p style="margin: 0; font-size: 0.9rem;"><strong>üí° –î–µ–º–æ-–¥–æ—Å—Ç—É–ø:</strong> –ü–∞—Ä–æ–ª—å: <code>demo123</code></p>
                <p style="margin: 0.5rem 0 0 0; font-size: 0.8rem; color: #666;">–ö–∞–∂–¥—ã–π –∫–ª–∏–µ–Ω—Ç –∏–º–µ–µ—Ç —Ä–∞–∑–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏</p>
            </div>
        </div>
    </div>
    """, unsafe_allow_html=True)

def create_portfolio_metrics(client_data, portfolio_dict):
    """–°–æ–∑–¥–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
    portfolio_type = client_data['portfolio_type']
    
    metrics_map = {
        '–∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π': {'expected_return': 0.18, 'volatility': 0.32, 'sharpe_ratio': 0.56, 'max_drawdown': -0.40},
        '—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π': {'expected_return': 0.095, 'volatility': 0.14, 'sharpe_ratio': 0.68, 'max_drawdown': -0.20},
        '–¥–æ—Ö–æ–¥–Ω—ã–π': {'expected_return': 0.078, 'volatility': 0.11, 'sharpe_ratio': 0.71, 'max_drawdown': -0.15},
        '—É–ª—å—Ç—Ä–∞-–∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π': {'expected_return': 0.045, 'volatility': 0.05, 'sharpe_ratio': 0.90, 'max_drawdown': -0.08}
    }
    
    return metrics_map.get(portfolio_type, metrics_map['—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π'])

def create_growth_chart(client_data, portfolio_type, current_client):
    """–°–æ–∑–¥–∞–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —Ä–æ—Å—Ç–∞"""
    dates = pd.date_range(start='2021-01-01', end='2024-01-01', freq='M')
    
    returns_map = {
        '–∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π': {'mean': 0.015, 'std': 0.08},
        '—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π': {'mean': 0.008, 'std': 0.04},
        '–¥–æ—Ö–æ–¥–Ω—ã–π': {'mean': 0.006, 'std': 0.03},
        '—É–ª—å—Ç—Ä–∞-–∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π': {'mean': 0.004, 'std': 0.02}
    }
    
    return_profile = returns_map.get(portfolio_type, returns_map['—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π'])
    seed = sum(ord(c) for c in current_client)
    np.random.seed(seed)
    
    monthly_returns = np.random.normal(return_profile['mean'], return_profile['std'], len(dates))
    initial = client_data['initial_investment']
    values = [initial]
    
    for ret in monthly_returns:
        values.append(values[-1] * (1 + ret))
    
    return dates, values[1:], initial

def display_subscription_status(client_name: str):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞"""
    subscription_level = get_subscription_level(client_name)
    subscription_details = get_subscription_details(client_name)
    
    st.sidebar.markdown("---")
    st.sidebar.subheader("üíé –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞")
    
    # –ë–µ–π–¥–∂ –ø–æ–¥–ø–∏—Å–∫–∏
    badge_html = display_subscription_badge(subscription_level)
    st.sidebar.markdown(f"<div style='text-align: center; margin-bottom: 1rem;'>{badge_html}</div>", unsafe_allow_html=True)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —Ç–∞—Ä–∏—Ñ–µ
    st.sidebar.write(f"**–¢–∞—Ä–∏—Ñ:** {subscription_details['name']}")
    st.sidebar.write(f"**–°—Ç–æ–∏–º–æ—Å—Ç—å:** {subscription_details['price']} —Ä—É–±/–º–µ—Å")
    st.sidebar.write(f"**–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:** {subscription_details['expires']}")
    
    # –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    st.sidebar.markdown("**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**")
    features = SUBSCRIPTION_FEATURES[subscription_level]['features']
    for feature in features[:3]:
        st.sidebar.write(f"‚Ä¢ {feature}")
    
    # –ö–Ω–æ–ø–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω–µ –ø—Ä–µ–º–∏—É–º
    if subscription_level != 'premium':
        st.sidebar.markdown("---")
        levels = ['trial', 'basic', 'advanced', 'premium']
        current_index = levels.index(subscription_level) if subscription_level in levels else 0
        next_level = levels[current_index + 1] if current_index < len(levels) - 1 else 'premium'
        next_sub_info = SUBSCRIPTION_FEATURES.get(next_level, {})
        
        if st.sidebar.button(f"üöÄ –£–ª—É—á—à–∏—Ç—å –¥–æ {next_sub_info.get('name', '–ü—Ä–µ–º–∏—É–º')}", use_container_width=True):
            st.session_state.current_page = "üíé –¢–∞—Ä–∏—Ñ—ã"
            st.rerun()

def show_feature_unlock_prompt(feature_name: str, required_level: str, client_name: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–º—Ç –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ñ—É–Ω–∫—Ü–∏–∏"""
    current_level = get_subscription_level(client_name)
    required_plan = SUBSCRIPTION_FEATURES[required_level]
    
    st.warning(f"üîí **{feature_name} –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ —Ç–∞—Ä–∏—Ñ–µ {required_plan['name']}**")
    
    col1, col2 = st.columns([3, 1])
    
    with col1:
        st.write(f"**–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:**")
        for feature in required_plan['features'][:3]:
            st.write(f"‚Ä¢ {feature}")
    
    with col2:
        if st.button(f"üí≥ {required_plan['price']}‚ÇΩ/–º–µ—Å", key=f"unlock_{feature_name}"):
            st.session_state.current_page = "üíé –¢–∞—Ä–∏—Ñ—ã"
            st.rerun()

def display_pricing_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º —Ç–∞—Ä–∏—Ñ–æ–≤"""
    st.title("üíé –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π —Ç–∞—Ä–∏—Ñ")
    st.write("–ù–∞—á–Ω–∏—Ç–µ —Å –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –∏ —É–ª—É—á—à–∞–π—Ç–µ –ø–æ –º–µ—Ä–µ —Ä–æ—Å—Ç–∞ –≤–∞—à–∏—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Ç–∞—Ä–∏—Ñ–æ–≤
    col1, col2, col3, col4 = st.columns(4)
    
    for i, level in enumerate(['trial', 'basic', 'advanced', 'premium']):
        plan = SUBSCRIPTION_FEATURES[level]
        with [col1, col2, col3, col4][i]:
            st.subheader(plan['name'])
            st.metric("–°—Ç–æ–∏–º–æ—Å—Ç—å", f"{plan['price']}‚ÇΩ/–º–µ—Å")
            
            st.write("**–í–∫–ª—é—á–µ–Ω–æ:**")
            for feature in plan['features'][:4]:
                st.write(f"‚úÖ {feature}")
            
            if level == 'trial':
                st.button("üéÅ –ù–∞—á–∞—Ç—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥", key=f"btn_{level}", use_container_width=True)
            else:
                st.button(f"üí≥ –í—ã–±—Ä–∞—Ç—å {plan['name']}", key=f"btn_{level}", use_container_width=True)

def advanced_analytics_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    current_client = st.session_state.current_user
    
    st.title("üìà –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
    if not can_access_advanced_analytics(current_client):
        show_feature_unlock_prompt("–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", "advanced", current_client)
        return
    
    st.success(f"üéØ –£ –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–µ!")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
    client_data = get_client_details(current_client)
    portfolio_dict = get_portfolio_by_client(current_client)
    
    if not portfolio_dict:
        st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—å")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    with st.spinner("üîç –ü—Ä–æ–≤–æ–¥–∏–º —É–≥–ª—É–±–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è..."):
        analyzer = AdvancedPortfolioAnalysis(portfolio_dict, current_client)
        results = analyzer.comprehensive_analysis()
    
    if results:
        display_portfolio_analysis(results)

def dashboard_page():
    """–ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –° –£–õ–£–ß–®–ï–ù–ù–´–ú –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï–ú –ü–û–î–ü–ò–°–û–ö"""
    
    current_client = st.session_state.current_user
    client_data = get_client_details(current_client)
    portfolio_dict = get_portfolio_by_client(current_client)
    
    if not client_data or not portfolio_dict:
        st.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    # –û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø
    st.sidebar.markdown("---")
    st.sidebar.subheader("üîß –û—Ç–ª–∞–¥–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫")
    subscription_level = get_subscription_level(current_client)
    subscription_details = get_subscription_details(current_client)
    st.sidebar.write(f"**–ö–ª–∏–µ–Ω—Ç:** {current_client}")
    st.sidebar.write(f"**–£—Ä–æ–≤–µ–Ω—å:** {subscription_level}")
    st.sidebar.write(f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {subscription_details['name']}")
    st.sidebar.write(f"**–¶–µ–Ω–∞:** {subscription_details['price']} —Ä—É–±")
    st.sidebar.write(f"**Advanced –¥–æ—Å—Ç—É–ø:** {can_access_advanced_analytics(current_client)}")
    st.sidebar.write(f"**Premium –¥–æ—Å—Ç—É–ø:** {can_access_premium_features(current_client)}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞
    has_advanced_access = can_access_advanced_analytics(current_client)
    has_premium_access = can_access_premium_features(current_client)
    subscription_level = get_subscription_level(current_client)
    subscription_details = get_subscription_details(current_client)
    
    # –ë–µ–π–¥–∂ –ø–æ–¥–ø–∏—Å–∫–∏
    badge_html = display_subscription_badge(subscription_level)
    
    # –ó–ê–ì–û–õ–û–í–û–ö –° –ë–ï–ô–î–ñ–ï–ú –ü–û–î–ü–ò–°–ö–ò
    st.markdown(f'''
    <div style="text-align: center; padding: 2rem; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border-radius: 15px; margin-bottom: 2rem;">
        <h1 style="color: white; margin-bottom: 0.5rem;">ü§ñ –Æ–Ω–∏–í–µ—Å—Ç AI –°–æ–≤–µ—Ç–Ω–∏–∫</h1>
        <h2 style="color: white; margin: 0;">{current_client} - {subscription_details['name']}</h2>
        <div style="margin-top: 0.5rem;">
            {badge_html}
        </div>
    </div>
    ''', unsafe_allow_html=True)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ä–∞—Å–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    col1, col2, col3 = st.columns([2, 1, 1])
    
    with col1:
        st.markdown(f'<div style="font-size: 1.2rem;">üë§ <strong>{current_client}</strong></div>', unsafe_allow_html=True)
    
    with col2:
        st.metric("–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", f"{client_data['initial_investment']:,.0f} ‚ÇΩ")
    
    with col3:
        if st.button("üö™ –í—ã–π—Ç–∏", use_container_width=True, type="secondary"):
            st.session_state.authenticated = False
            st.session_state.current_user = None
            st.rerun()
    
    st.markdown("---")
    
    # SIDEBAR
    with st.sidebar:
        st.title("üéØ –ù–∞–≤–∏–≥–∞—Ü–∏—è")
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
        page = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", 
                       ["üìä –î–∞—à–±–æ—Ä–¥", "üìà –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", "üíé –¢–∞—Ä–∏—Ñ—ã"],
                       index=0)
        
        if page != st.session_state.current_page:
            st.session_state.current_page = page
            st.rerun()
        
        # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        st.markdown("---")
        clients = get_all_clients()
        new_user = st.selectbox("üë• –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞:", clients, 
                              index=clients.index(current_client))
        
        if new_user != current_client:
            st.session_state.current_user = new_user
            st.rerun()
        
        st.markdown("---")
        
        # –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        col1, col2 = st.columns(2)
        with col1:
            st.metric("–ê–∫—Ç–∏–≤—ã", len(portfolio_dict))
        with col2:
            st.metric("–†–∏—Å–∫", client_data['risk_profile'])
        
        # –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
        display_subscription_status(current_client)
        
        st.markdown("---")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ AI
        st.subheader("ü§ñ –°–æ–≤–µ—Ç—ã")
        recommendations = generate_subscription_based_recommendations(current_client)
        for rec in recommendations[:2]:
            st.info(rec)
    
    # –û–°–ù–û–í–ù–û–ô –ö–û–ù–¢–ï–ù–¢
    
    # 1. –ü—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞
    st.subheader("üë§ –ü—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞")
    col1, col2 = st.columns(2)
    
    with col1:
        st.write(f"**–¢–∏–ø –ø–æ—Ä—Ç—Ñ–µ–ª—è:** {client_data['portfolio_type']}")
        st.write(f"**–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞:** {client_data['risk_profile']}")
        st.write(f"**–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –≥–æ—Ä–∏–∑–æ–Ω—Ç:** {client_data['investment_horizon']}")
    
    with col2:
        st.write(f"**–û–ø—ã—Ç:** {client_data['experience']}")
        st.write(f"**–¶–µ–ª—å:** {client_data['financial_goals']}")
        st.write(f"**–¶–µ–ª–µ–≤–∞—è —Å—É–º–º–∞:** {client_data['target_amount']:,.0f} ‚ÇΩ")
    
    # 2. –û–±–∑–æ—Ä –ø–æ—Ä—Ç—Ñ–µ–ª—è
    st.subheader("üìä –û–±–∑–æ—Ä –ø–æ—Ä—Ç—Ñ–µ–ª—è")
    weights_df = pd.DataFrame(list(portfolio_dict.items()), columns=['–ê–∫—Ç–∏–≤', '–î–æ–ª—è'])
    
    col1, col2 = st.columns([1, 2])
    
    with col1:
        fig_pie = px.pie(weights_df, values='–î–æ–ª—è', names='–ê–∫—Ç–∏–≤', hole=0.3)
        st.plotly_chart(fig_pie, use_container_width=True)
    
    with col2:
        st.dataframe(weights_df, use_container_width=True, hide_index=True)
    
    # 3. –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    st.subheader("üîç –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏")
    portfolio_metrics = create_portfolio_metrics(client_data, portfolio_dict)
    
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("–û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å", f"{portfolio_metrics['expected_return']:.1%}")
    with col2:
        st.metric("–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å", f"{portfolio_metrics['volatility']:.1%}")
    with col3:
        st.metric("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞", f"{portfolio_metrics['sharpe_ratio']:.2f}")
    with col4:
        st.metric("–ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞", f"{portfolio_metrics['max_drawdown']:.1%}")
    
    # 4. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ AI - –†–ê–ó–ù–´–ï –î–õ–Ø –†–ê–ó–ù–´–• –ü–û–î–ü–ò–°–û–ö
    st.subheader("ü§ñ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ AI")
    
    recommendations = generate_subscription_based_recommendations(current_client)
    
    for rec in recommendations:
        st.info(rec)
    
    # –ü—Ä–µ–º–∏—É–º —Å–µ–∫—Ü–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤)
    if has_premium_access:
        st.subheader("üíé –ü—Ä–µ–º–∏—É–º –∞–Ω–∞–ª–∏—Ç–∏–∫–∞")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.success("""
            **ü§ñ AI –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º–µ—Å—è—Ü**
            - –û–∂–∏–¥–∞–µ–º—ã–π —Ä–æ—Å—Ç: +4.5%
            - –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: 78%
            - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –î–µ—Ä–∂–∞—Ç—å –ø–æ–∑–∏—Ü–∏–∏
            """)
        
        with col2:
            st.success("""
            **üèÜ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —ç—Ç–∞–ª–æ–Ω–∞–º–∏**
            - –í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å: +15.2%
            - S&P 500: +12.1%
            - Nasdaq: +18.3%
            """)
    elif has_advanced_access:
        # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É–ª—É—á—à–∏—Ç—å –¥–æ –ø—Ä–µ–º–∏—É–º
        st.info("üíé **AI-–ø—Ä–æ–≥–Ω–æ–∑—ã –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —ç—Ç–∞–ª–æ–Ω–∞–º–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –ü—Ä–µ–º–∏—É–º —Ç–∞—Ä–∏—Ñ–µ**")
        if st.button("üíé –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –ü—Ä–µ–º–∏—É–º", key="upgrade_premium"):
            show_feature_unlock_prompt("AI-–ø—Ä–æ–≥–Ω–æ–∑—ã", "premium", current_client)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    init_session_state()
    
    if not st.session_state.authenticated:
        login_page()
    else:
        # –†–æ—É—Ç–∏–Ω–≥ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
        if st.session_state.current_page == "üìä –î–∞—à–±–æ—Ä–¥":
            dashboard_page()
        elif st.session_state.current_page == "üìà –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞":
            advanced_analytics_page()
        elif st.session_state.current_page == "üíé –¢–∞—Ä–∏—Ñ—ã":
            display_pricing_page()

if __name__ == "__main__":
    main()


