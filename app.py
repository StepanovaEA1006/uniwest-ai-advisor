# app.py - –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è

import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
import plotly.express as px
from datetime import datetime
import hashlib

# –ò–ú–ü–û–†–¢–ò–†–£–ï–ú –§–£–ù–ö–¶–ò–ò –ò–ó database.py
from database import (
    get_all_clients, 
    get_client_details, 
    get_portfolio_by_client, 
    generate_client_recommendations
)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É Streamlit
st.set_page_config(
    page_title="–Æ–Ω–∏–í–µ—Å—Ç - AI –°–æ–≤–µ—Ç–Ω–∏–∫ –ø–æ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

def hash_password(password):
    """–•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è"""
    return hashlib.sha256(password.encode()).hexdigest()

def init_session_state():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏"""
    if 'authenticated' not in st.session_state:
        st.session_state.authenticated = False
    if 'current_user' not in st.session_state:
        st.session_state.current_user = None

def login_page():
    """–ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞"""
    st.markdown("""
    <style>
        .login-container {
            max-width: 90%;
            width: 400px;
            margin: 10vh auto;
            padding: 2rem;
            background: white;
            border-radius: 20px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            text-align: center;
        }
        .main-title {
            font-size: clamp(2rem, 5vw, 2.8rem);
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            margin-bottom: 0.5rem;
            font-weight: bold;
        }
        .subtitle {
            color: #666;
            margin-bottom: 2rem;
            font-size: clamp(1rem, 3vw, 1.2rem);
        }
        
        /* –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö */
        @media (max-width: 768px) {
            .login-container {
                margin: 5vh auto;
                padding: 1.5rem;
                width: 85%;
            }
        }
    </style>
    """, unsafe_allow_html=True)
    
    st.markdown("""
    <div style='display: flex; justify-content: center; align-items: center; min-height: 80vh; padding: 1rem;'>
        <div class="login-container">
            <h1 class="main-title">ü§ñ –Æ–Ω–∏–í–µ—Å—Ç</h1>
            <div class="subtitle">AI –°–æ–≤–µ—Ç–Ω–∏–∫ –ø–æ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º</div>
    """, unsafe_allow_html=True)
    
    clients = get_all_clients()
    selected_client = st.selectbox(
        "üë§ –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞:",
        clients,
        index=0
    )
    
    password = st.text_input("üîí –ü–∞—Ä–æ–ª—å:", type="password", value="demo123")
    
    if st.button("üöÄ –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É", use_container_width=True, type="primary"):
        if password == "demo123":
            st.session_state.authenticated = True
            st.session_state.current_user = selected_client
            st.rerun()
        else:
            st.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'demo123'")
    
    st.markdown("""
            <div style="margin-top: 2rem; padding: 1rem; background: #f8f9fa; border-radius: 10px;">
                <p style="margin: 0; font-size: 0.9rem;"><strong>üí° –î–µ–º–æ-–¥–æ—Å—Ç—É–ø:</strong> –ü–∞—Ä–æ–ª—å: <code>demo123</code></p>
            </div>
        </div>
    </div>
    """, unsafe_allow_html=True)

def create_portfolio_metrics(client_data, portfolio_dict):
    """–°–æ–∑–¥–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
    portfolio_type = client_data['portfolio_type']
    
    metrics_map = {
        '–∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π': {'expected_return': 0.18, 'volatility': 0.32, 'sharpe_ratio': 0.56, 'max_drawdown': -0.40},
        '—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π': {'expected_return': 0.095, 'volatility': 0.14, 'sharpe_ratio': 0.68, 'max_drawdown': -0.20},
        '–¥–æ—Ö–æ–¥–Ω—ã–π': {'expected_return': 0.078, 'volatility': 0.11, 'sharpe_ratio': 0.71, 'max_drawdown': -0.15},
        '—É–ª—å—Ç—Ä–∞-–∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π': {'expected_return': 0.045, 'volatility': 0.05, 'sharpe_ratio': 0.90, 'max_drawdown': -0.08}
    }
    
    return metrics_map.get(portfolio_type, metrics_map['—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π'])

def create_growth_chart(client_data, portfolio_type, current_client):
    """–°–æ–∑–¥–∞–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —Ä–æ—Å—Ç–∞"""
    dates = pd.date_range(start='2021-01-01', end='2024-01-01', freq='M')
    
    returns_map = {
        '–∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π': {'mean': 0.015, 'std': 0.08},
        '—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π': {'mean': 0.008, 'std': 0.04},
        '–¥–æ—Ö–æ–¥–Ω—ã–π': {'mean': 0.006, 'std': 0.03},
        '—É–ª—å—Ç—Ä–∞-–∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π': {'mean': 0.004, 'std': 0.02}
    }
    
    return_profile = returns_map.get(portfolio_type, returns_map['—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π'])
    seed = sum(ord(c) for c in current_client)
    np.random.seed(seed)
    
    monthly_returns = np.random.normal(return_profile['mean'], return_profile['std'], len(dates))
    initial = client_data['initial_investment']
    values = [initial]
    
    for ret in monthly_returns:
        values.append(values[-1] * (1 + ret))
    
    return dates, values[1:], initial

def dashboard_page():
    """–ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    
    # –ê–î–ê–ü–¢–ò–í–ù–´–ï –°–¢–ò–õ–ò –î–õ–Ø –í–°–ï–• –£–°–¢–†–û–ô–°–¢–í
    st.markdown("""
    <style>
        /* –ë–∞–∑–æ–≤—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ */
        .stApp {
            background-color: #ffffff !important;
        }
        
        body, p, div, h1, h2, h3, h4, h5, h6, span, li, strong, em {
            color: #000000 !important;
        }
        
        /* –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ */
        .main-header {
            font-size: clamp(1.8rem, 4vw, 2.5rem) !important;
            color: #1f77b4 !important;
            text-align: center;
            margin-bottom: 1rem;
            font-weight: bold;
        }
        
        .section-header {
            font-size: clamp(1.3rem, 3vw, 1.8rem) !important;
            margin: 1.5rem 0 1rem 0 !important;
        }
        
        /* –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ */
        .client-card {
            background: #ffffff !important;
            color: #000000 !important;
            padding: clamp(1rem, 3vw, 2rem) !important;
            border-radius: 15px;
            margin: 1rem 0;
            border: 2px solid #1f77b4;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        }
        
        .metric-card {
            background: #f8f9fa !important;
            color: #000000 !important;
            padding: clamp(0.8rem, 2vw, 1rem) !important;
            border-radius: 10px;
            border-left: 4px solid #1f77b4;
            margin: 0.5rem 0;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }
        
        /* –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞ */
        div.stButton > button[kind="secondary"] {
            background-color: #f8f9fa !important;
            color: #000000 !important;
            border: 1px solid #dee2e6 !important;
            font-weight: 500;
            font-size: clamp(0.8rem, 2vw, 1rem) !important;
        }
        
        /* –ú–æ–±–∏–ª—å–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è */
        @media (max-width: 768px) {
            /* –£–ø—Ä–æ—â–∞–µ–º —Ö–µ–¥–µ—Ä –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö */
            .mobile-header {
                flex-direction: column !important;
                gap: 0.5rem !important;
            }
            
            /* –£–º–µ–Ω—å—à–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã */
            .client-card {
                margin: 0.5rem 0 !important;
            }
            
            /* –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º sidebar */
            .sidebar-content {
                font-size: 0.9rem !important;
            }
            
            /* –£–ª—É—á—à–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã */
            .dataframe {
                font-size: 0.8rem !important;
            }
        }
        
        /* –ü–ª–∞–Ω—à–µ—Ç—ã */
        @media (min-width: 769px) and (max-width: 1024px) {
            .client-card {
                padding: 1.5rem !important;
            }
        }
        
        /* –°–∫—Ä—ã–≤–∞–µ–º —Å–ª–æ–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö */
        @media (max-width: 480px) {
            .hide-on-mobile {
                display: none !important;
            }
        }
    </style>
    """, unsafe_allow_html=True)
    
    current_client = st.session_state.current_user
    client_data = get_client_details(current_client)
    portfolio_dict = get_portfolio_by_client(current_client)
    
    if not client_data or not portfolio_dict:
        st.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    # –ê–î–ê–ü–¢–ò–í–ù–´–ô –•–ï–î–ï–†
    st.markdown(f'<div class="main-header">ü§ñ –Æ–Ω–∏–í–µ—Å—Ç - AI –°–æ–≤–µ—Ç–Ω–∏–∫</div>', unsafe_allow_html=True)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ä–∞—Å–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    col1, col2, col3 = st.columns([2, 1, 1])
    
    with col1:
        st.markdown(f'<div class="user-info">üë§ <strong>{current_client}</strong></div>', unsafe_allow_html=True)
    
    with col2:
        st.metric("–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", f"{client_data['initial_investment']:,.0f} ‚ÇΩ")
    
    with col3:
        if st.button("üö™ –í—ã–π—Ç–∏", use_container_width=True, type="secondary"):
            st.session_state.authenticated = False
            st.session_state.current_user = None
            st.rerun()
    
    st.markdown("---")
    
    # –ê–î–ê–ü–¢–ò–í–ù–´–ô SIDEBAR
    with st.sidebar:
        st.title("üéØ –ù–∞–≤–∏–≥–∞—Ü–∏—è")
        
        # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        clients = get_all_clients()
        new_user = st.selectbox("üë• –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞:", clients, 
                              index=clients.index(current_client))
        
        if new_user != current_client:
            st.session_state.current_user = new_user
            st.rerun()
        
        st.markdown("---")
        
        # –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è
        st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        col1, col2 = st.columns(2)
        with col1:
            st.metric("–ê–∫—Ç–∏–≤—ã", len(portfolio_dict))
        with col2:
            st.metric("–†–∏—Å–∫", client_data['risk_profile'])
        
        st.markdown("---")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ AI
        st.subheader("ü§ñ –°–æ–≤–µ—Ç—ã")
        recommendations = generate_client_recommendations(current_client)
        for rec in recommendations[:2]:  # –ú–µ–Ω—å—à–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
            st.info(rec)
    
    # –û–°–ù–û–í–ù–û–ô –ö–û–ù–¢–ï–ù–¢ - –ê–î–ê–ü–¢–ò–í–ù–´–ô
    
    # 1. –ü—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞ - –∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Å–µ—Ç–∫–∞
    st.markdown(f"""
    <div class="client-card">
        <h2>üë§ {current_client}</h2>
        <p><em>{client_data['description']}</em></p>
        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 1rem; margin-top: 1rem;">
            <div>
                <p><strong>üíº –¢–∏–ø –ø–æ—Ä—Ç—Ñ–µ–ª—è:</strong> {client_data['portfolio_type']}</p>
                <p><strong>üéØ –¶–µ–ª—å:</strong> {client_data['financial_goals']}</p>
                <p><strong>üí∞ –¶–µ–ª—å:</strong> {client_data['target_amount']:,.0f} ‚ÇΩ</p>
            </div>
            <div>
                <p><strong>‚ö° –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞:</strong> {client_data['risk_profile']}</p>
                <p><strong>üí™ –û–ø—ã—Ç:</strong> {client_data['experience']}</p>
                <p><strong>üìÖ –ì–æ—Ä–∏–∑–æ–Ω—Ç:</strong> {client_data['investment_horizon']}</p>
            </div>
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    # 2. –û–±–∑–æ—Ä –ø–æ—Ä—Ç—Ñ–µ–ª—è - –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
    st.markdown('<div class="section-header">üìä –û–±–∑–æ—Ä –ø–æ—Ä—Ç—Ñ–µ–ª—è</div>', unsafe_allow_html=True)
    
    # –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö - –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è —Ä–∞—Å–∫–ª–∞–¥–∫–∞, –Ω–∞ –¥–µ—Å–∫—Ç–æ–ø–µ - –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è
    if st.checkbox("üì± –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –≤–∏–¥", value=False, help="–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤"):
        # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è —Ä–∞—Å–∫–ª–∞–¥–∫–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
        st.subheader("üçï –°–æ—Å—Ç–∞–≤ –ø–æ—Ä—Ç—Ñ–µ–ª—è")
        weights_df = pd.DataFrame(list(portfolio_dict.items()), columns=['–ê–∫—Ç–∏–≤', '–î–æ–ª—è'])
        
        fig_pie = px.pie(weights_df, values='–î–æ–ª—è', names='–ê–∫—Ç–∏–≤', 
                        color_discrete_sequence=px.colors.sequential.RdBu, hole=0.3)
        fig_pie.update_traces(textposition='inside', textinfo='percent+label')
        fig_pie.update_layout(showlegend=False, height=300)
        st.plotly_chart(fig_pie, use_container_width=True)
        
        # –î–µ—Ç–∞–ª–∏ –∞–∫—Ç–∏–≤–æ–≤ –≤ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–º –≤–∏–¥–µ
        st.subheader("üìà –î–µ—Ç–∞–ª–∏ –∞–∫—Ç–∏–≤–æ–≤")
        sorted_assets = sorted(portfolio_dict.items(), key=lambda x: x[1], reverse=True)
        
        for asset, weight in sorted_assets:
            investment = client_data['initial_investment'] * weight
            st.markdown(f"""
            <div class="metric-card">
                <div style="display: flex; justify-content: space-between; align-items: center;">
                    <strong>{asset}</strong>
                    <span>{weight:.1%} ‚Ä¢ {investment:,.0f} ‚ÇΩ</span>
                </div>
            </div>
            """, unsafe_allow_html=True)
    else:
        # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è —Ä–∞—Å–∫–ª–∞–¥–∫–∞ –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞
        col1, col2 = st.columns([1, 2])
        
        with col1:
            st.subheader("üçï –°–æ—Å—Ç–∞–≤ –ø–æ—Ä—Ç—Ñ–µ–ª—è")
            weights_df = pd.DataFrame(list(portfolio_dict.items()), columns=['–ê–∫—Ç–∏–≤', '–î–æ–ª—è'])
            
            fig_pie = px.pie(weights_df, values='–î–æ–ª—è', names='–ê–∫—Ç–∏–≤', 
                            color_discrete_sequence=px.colors.sequential.RdBu, hole=0.3)
            fig_pie.update_traces(textposition='inside', textinfo='percent+label')
            fig_pie.update_layout(showlegend=False, height=400)
            st.plotly_chart(fig_pie, use_container_width=True)
        
        with col2:
            st.subheader("üìà –î–µ—Ç–∞–ª–∏ –∞–∫—Ç–∏–≤–æ–≤")
            sorted_assets = sorted(portfolio_dict.items(), key=lambda x: x[1], reverse=True)
            
            assets_df = pd.DataFrame(sorted_assets, columns=['–ê–∫—Ç–∏–≤', '–î–æ–ª—è'])
            assets_df['–î–æ–ª—è'] = assets_df['–î–æ–ª—è'].apply(lambda x: f'{x:.1%}')
            assets_df['–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏'] = assets_df['–î–æ–ª—è'].apply(
                lambda x: f"{client_data['initial_investment'] * float(x.strip('%'))/100:,.0f} ‚ÇΩ"
            )
            
            st.dataframe(assets_df, use_container_width=True, hide_index=True)
    
    # 3. –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ - –∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Å–µ—Ç–∫–∞
    st.markdown('<div class="section-header">üîç –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏</div>', unsafe_allow_html=True)
    
    portfolio_metrics = create_portfolio_metrics(client_data, portfolio_dict)
    key_metrics = client_data.get('key_metrics', {})
    
    # –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö - 2 –∫–æ–ª–æ–Ω–∫–∏, –Ω–∞ –¥–µ—Å–∫—Ç–æ–ø–µ - 4 –∫–æ–ª–æ–Ω–∫–∏
    cols = st.columns(2)  # –í—Å–µ–≥–¥–∞ 2 –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –ª—É—á—à–µ–π –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏
    
    with cols[0]:
        st.metric("–û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å", f"{key_metrics.get('expected_return', portfolio_metrics['expected_return']):.2%}")
        st.metric("–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å", f"{key_metrics.get('volatility', portfolio_metrics['volatility']):.2%}")
    
    with cols[1]:
        st.metric("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞", f"{key_metrics.get('sharpe_ratio', portfolio_metrics['sharpe_ratio']):.2f}")
        st.metric("–ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞", f"{portfolio_metrics['max_drawdown']:.1%}")
    
    # 4. –ì—Ä–∞—Ñ–∏–∫ —Ä–æ—Å—Ç–∞ - –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π
    st.markdown('<div class="section-header">üìà –î–∏–Ω–∞–º–∏–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è</div>', unsafe_allow_html=True)
    
    try:
        dates, values, initial = create_growth_chart(client_data, client_data['portfolio_type'], current_client)
        
        df = pd.DataFrame({'–î–∞—Ç–∞': dates, '–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è': values})
        fig = px.line(df, x='–î–∞—Ç–∞', y='–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è', 
                     title='', color_discrete_sequence=['#1f77b4'])
        fig.update_layout(
            xaxis_title="",
            yaxis_title="–°—Ç–æ–∏–º–æ—Å—Ç—å (‚ÇΩ)",
            hovermode='x unified',
            showlegend=False,
            height=300  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
        )
        
        st.plotly_chart(fig, use_container_width=True)
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
    
    # 5. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ AI - –≤—Å–µ–≥–¥–∞ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ
    st.markdown('<div class="section-header">ü§ñ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ AI</div>', unsafe_allow_html=True)
    
    recommendations = generate_client_recommendations(current_client)
    for i, rec in enumerate(recommendations):
        st.markdown(f"""
        <div class="metric-card">
            <strong>üìå {rec}</strong>
        </div>
        """, unsafe_allow_html=True)
    
    # –§—É—Ç–µ—Ä
    st.markdown("---")
    st.markdown("""
    <div style='text-align: center; color: #666; font-size: 0.9rem;'>
        <p>ü§ñ –Æ–Ω–∏–í–µ—Å—Ç AI –°–æ–≤–µ—Ç–Ω–∏–∫ | –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞</p>
    </div>
    """, unsafe_allow_html=True)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    init_session_state()
    
    if not st.session_state.authenticated:
        login_page()
    else:
        dashboard_page()

if __name__ == "__main__":
    main()
