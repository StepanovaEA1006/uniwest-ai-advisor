# app.py - –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è –°–û –í–°–ï–ú–ò –ü–û–ö–ê–ó–ê–¢–ï–õ–Ø–ú–ò –ò TOOLTIP'–ê–ú–ò

import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
import plotly.express as px
from datetime import datetime
import hashlib

# advanced_analysis.py - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä—è–º–æ –≤ app.py
import numpy as np
import pandas as pd
from typing import Dict, List, Optional, Tuple
import streamlit as st

class AdvancedPortfolioAnalysis:
    """–£—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è —Å–æ –≤—Å–µ–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏"""
    
    def __init__(self, portfolio_dict: Dict[str, float], client_name: str = "–î–µ–º–æ –ö–ª–∏–µ–Ω—Ç"):
        self.portfolio_dict = portfolio_dict
        self.client_name = client_name
        
    def comprehensive_analysis(self) -> Dict:
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –∏ –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        base_metrics = self.calculate_basic_metrics()
        risk_metrics = self.calculate_advanced_risk_metrics()
        
        return {
            'basic_metrics': base_metrics,
            'risk_metrics': risk_metrics,
            'portfolio_quality': self.analyze_portfolio_quality(),
            'efficiency_metrics': self.calculate_efficiency_metrics(),
            'comparative_analysis': self.benchmark_comparison(),
            'ai_insights': self.generate_ai_insights() if len(self.portfolio_dict) > 3 else [],
            'recommendations': self.generate_detailed_recommendations()
        }
    
    def calculate_basic_metrics(self) -> Dict:
        """–†–∞—Å—á–µ—Ç –±–∞–∑–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        return {
            'annual_return': 0.12,
            'annual_volatility': 0.18,
            'sharpe_ratio': 0.67,
            'max_drawdown': -0.15,
            'beta': 1.12,
            'current_value': 1500000,
            'total_return': 0.25,
            'client_name': self.client_name
        }
    
    def calculate_advanced_risk_metrics(self) -> Dict:
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤ –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        return {
            'parametric_var_95': -0.025,
            'parametric_var_99': -0.035,
            'cvar_95': -0.038,
            'cvar_99': -0.045,
            'downside_deviation': 0.08,
            'worst_day': -0.05,
            'worst_month': -0.12,
            'value_at_risk_1m': -45000,
            'expected_shortfall': -68000,
            'stress_test_2008': -0.35,
            'stress_test_covid': -0.28
        }
    
    def calculate_efficiency_metrics(self) -> Dict:
        """–ú–µ—Ç—Ä–∏–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –∏ –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        return {
            # –ë–∞–∑–æ–≤—ã–µ
            'sharpe_ratio': 0.67,
            'sortino_ratio': 0.89,
            'beta': 1.12,
            
            # –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ
            'treynor_ratio': 0.107,
            'm_squared': 0.045,
            'jensen_alpha': 0.023,
            
            # –ü—Ä–µ–º–∏—É–º
            'modigliani_ratio': 0.028,
            'information_ratio': 0.15,
            'tracking_error': 0.045,
            'downside_deviation': 0.08,
            'calmar_ratio': 0.80
        }
    
    def analyze_portfolio_quality(self) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
        return {
            'diversification_score': 0.72,
            'concentration_risk': '—É–º–µ—Ä–µ–Ω–Ω—ã–π',
            'correlation_matrix': self.generate_correlation_matrix(),
            'sector_diversification': self.analyze_sector_diversification(),
            'asset_allocation_score': 0.85,
            'liquidity_score': 0.90
        }
    
    def benchmark_comparison(self) -> Dict:
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —ç—Ç–∞–ª–æ–Ω–Ω—ã–º–∏ –∏–Ω–¥–µ–∫—Å–∞–º–∏"""
        return {
            'sp500_return': 0.121,
            'nasdaq_return': 0.183,
            'rts_return': 0.085,
            'outperformance_sp500': 0.029,
            'outperformance_nasdaq': -0.033,
            'volatility_comparison': '–≤—ã—à–µ —Ä—ã–Ω–∫–∞',
            'percentile_ranking': 0.68
        }
    
    def generate_correlation_matrix(self) -> pd.DataFrame:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∞—Ç—Ä–∏—Ü—ã –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π"""
        assets = list(self.portfolio_dict.keys())
        np.random.seed(42)
        corr_matrix = np.random.uniform(-0.3, 0.8, (len(assets), len(assets)))
        np.fill_diagonal(corr_matrix, 1.0)
        return pd.DataFrame(corr_matrix, index=assets, columns=assets)
    
    def analyze_sector_diversification(self) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –æ—Ç—Ä–∞—Å–ª–µ–≤–æ–π –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        sectors = {
            '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏': 0.35,
            '–§–∏–Ω–∞–Ω—Å—ã': 0.20,
            '–ó–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ': 0.15,
            '–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã': 0.12,
            '–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞': 0.08,
            '–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å': 0.06,
            '–ú–∞—Ç–µ—Ä–∏–∞–ª—ã': 0.04
        }
        return sectors
    
    def generate_ai_insights(self) -> List[str]:
        """AI –∏–Ω—Å–∞–π—Ç—ã –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        return [
            "ü§ñ **ML-–∞–Ω–∞–ª–∏–∑**: –ü–æ—Ä—Ç—Ñ–µ–ª—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ —Ä—ã–Ω–æ—á–Ω—ã–º —à–æ–∫–∞–º",
            "üìà **–ü–∞—Ç—Ç–µ—Ä–Ω—ã**: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å –≤ Q4",
            "‚ö° **–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å**: –û–∂–∏–¥–∞–µ—Ç—Å—è —Å–Ω–∏–∂–µ–Ω–∏–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ 15% –≤ —Å–ª–µ–¥—É—é—â–µ–º –∫–≤–∞—Ä—Ç–∞–ª–µ",
            "üéØ **–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è**: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –º–æ–∂–µ—Ç —É–≤–µ–ª–∏—á–∏—Ç—å –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –Ω–∞ 2.3%"
        ]
    
    def generate_detailed_recommendations(self) -> List[str]:
        """–î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        return [
            "üéØ **–¢–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è**: –£–≤–µ–ª–∏—á–∏—Ç—å –¥–æ–ª—é –∑–∞—â–∏—Ç–Ω—ã—Ö –∞–∫—Ç–∏–≤–æ–≤ –Ω–∞ 5%",
            "üìä **–†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç**: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–æ–ø-–ª–æ—Å—Å –Ω–∞ —É—Ä–æ–≤–Ω–µ -8% –¥–ª—è –≤—ã—Å–æ–∫–æ–≤–æ–ª–∞—Ç–∏–ª—å–Ω—ã—Ö –∞–∫—Ç–∏–≤–æ–≤",
            "üîÑ **–†–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞**: –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –µ–∂–µ–∫–≤–∞—Ä—Ç–∞–ª—å–Ω–∞—è —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞",
            "üåç **–î–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è**: –î–æ–±–∞–≤–∏—Ç—å exposure –∫ —Ä–∞–∑–≤–∏–≤–∞—é—â–∏–º—Å—è —Ä—ã–Ω–∫–∞–º"
        ]

# –û–ë–ù–û–í–õ–ï–ù–ù–´–ï TOOLTIP'–´ –î–õ–Ø –ü–û–ö–ê–ó–ê–¢–ï–õ–ï–ô - –£–õ–£–ß–®–ï–ù–ù–´–ï –ò –ë–û–õ–ï–ï –ü–û–ù–Ø–¢–ù–´–ï
TOOLTIPS = {
    # –ë–ê–ó–û–í–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò
    'sharpe_ratio': """
    üìä **–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞** - –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å —Å –ø–æ–ø—Ä–∞–≤–∫–æ–π –Ω–∞ —Ä–∏—Å–∫
    
    **–ß—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç:** –°–∫–æ–ª—å–∫–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –∑–∞ –∫–∞–∂–¥—É—é –µ–¥–∏–Ω–∏—Ü—É —Ä–∏—Å–∫–∞
    
    **–ö–∞–∫ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å:**
    ‚Ä¢ < 0.5 - –Ω–∏–∑–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    ‚Ä¢ 0.5-1.0 - —Ö–æ—Ä–æ—à–æ  
    ‚Ä¢ 1.0-2.0 - –æ—Ç–ª–∏—á–Ω–æ
    ‚Ä¢ > 2.0 - –≤—ã–¥–∞—é—â–∏–π—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    
    **–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 0.67 - –•–æ—Ä–æ—à–æ, –µ—Å—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è**
    """,
    
    'beta': """
    üìà **–ë–µ—Ç–∞-–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç** - –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫ —Ä—ã–Ω–∫—É
    
    **–ß—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç:** –ù–∞—Å–∫–æ–ª—å–∫–æ –≤–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –¥–≤–∏–∂–µ–Ω–∏—è —Ä—ã–Ω–∫–∞
    
    **–£—Ä–æ–≤–Ω–∏ —Ä–∏—Å–∫–∞:**
    ‚Ä¢ < 0 - –¥–≤–∏–∂–µ—Ç—Å—è –ø—Ä–æ—Ç–∏–≤ —Ä—ã–Ω–∫–∞ (—Ä–µ–¥–∫–æ)
    ‚Ä¢ 0-0.8 - –∑–∞—â–∏—Ç–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å
    ‚Ä¢ 0.8-1.2 - –∫–∞–∫ —Ä—ã–Ω–æ–∫
    ‚Ä¢ > 1.2 - –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —Ä–æ—Å—Ç
    
    **–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 1.12 - –û–∂–∏–¥–∞–π—Ç–µ –∫–æ–ª–µ–±–∞–Ω–∏–π –∫–∞–∫ —É —Ä—ã–Ω–∫–∞**
    """,
    
    'max_drawdown': """
    üìâ **–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞** - –°–∞–º—ã–µ –±–æ–ª—å—à–∏–µ –ø–æ—Ç–µ—Ä–∏
    
    **–ß—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç:** –°–∞–º–æ–µ —Å–∏–ª—å–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–∏–∫–∞ –¥–æ –º–∏–Ω–∏–º—É–º–∞
    
    **–û —á–µ–º –≥–æ–≤–æ—Ä–∏—Ç:**
    ‚Ä¢ < 10% - –æ—Ç–ª–∏—á–Ω–∞—è –∑–∞—â–∏—Ç–∞
    ‚Ä¢ 10-20% - —É–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–∏—Å–∫  
    ‚Ä¢ 20-30% - –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫
    ‚Ä¢ > 30% - —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫
    
    **–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: -15% - –£–º–µ—Ä–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ—Å–∞–¥–æ–∫**
    """,
    
    'annual_return': """
    üí∞ **–ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å** - –ü—Ä–∏—Ä–æ—Å—Ç –∫–∞–ø–∏—Ç–∞–ª–∞ –∑–∞ –≥–æ–¥
    
    **–ß—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç:** –ù–∞—Å–∫–æ–ª—å–∫–æ –≤—ã—Ä–æ—Å–ª–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è –∑–∞ –≥–æ–¥
    
    **–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –∏–Ω—Ñ–ª—è—Ü–∏–µ–π:**
    ‚Ä¢ < 5% - –Ω–∏–∂–µ –∏–Ω—Ñ–ª—è—Ü–∏–∏ (—Ä–µ–∞–ª—å–Ω—ã–µ –ø–æ—Ç–µ—Ä–∏)
    ‚Ä¢ 5-10% - –∑–∞—â–∏—Ç–∞ –æ—Ç –∏–Ω—Ñ–ª—è—Ü–∏–∏
    ‚Ä¢ 10-15% - —Ö–æ—Ä–æ—à–∏–π —Ä–æ—Å—Ç
    ‚Ä¢ > 15% - –≤—ã—Å–æ–∫–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
    
    **–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 12% - –•–æ—Ä–æ—à–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –≤—ã—à–µ –∏–Ω—Ñ–ª—è—Ü–∏–∏**
    """,
    
    'annual_volatility': """
    ‚ö° **–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å** - –†–∞–∑–º–∞—Ö –∫–æ–ª–µ–±–∞–Ω–∏–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    
    **–ß—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç:** –ù–∞—Å–∫–æ–ª—å–∫–æ —Å–∏–ª—å–Ω–æ "—Å–∫–∞—á–µ—Ç" —Ü–µ–Ω–∞ –≤–∞—à–µ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è
    
    **–£—Ä–æ–≤–Ω–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏:**
    ‚Ä¢ < 10% - –æ—á–µ–Ω—å —Å—Ç–∞–±–∏–ª—å–Ω–æ
    ‚Ä¢ 10-20% - —É–º–µ—Ä–µ–Ω–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
    ‚Ä¢ 20-30% - –≤—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å  
    ‚Ä¢ > 30% - —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è
    
    **–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 18% - –£–º–µ—Ä–µ–Ω–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è, –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å**
    """,
    
    # –ü–†–û–î–í–ò–ù–£–¢–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò
    'sortino_ratio': """
    üéØ **–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –°–æ—Ä—Ç–∏–Ω–æ** - –£–º–Ω–∞—è –≤–µ—Ä—Å–∏—è –®–∞—Ä–ø–∞
    
    **–í —á–µ–º –æ—Ç–ª–∏—á–∏–µ –æ—Ç –®–∞—Ä–ø–∞:** –£—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ "–ø–ª–æ—Ö—É—é" –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (—É–±—ã—Ç–∫–∏)
    
    **–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ:** –ë–æ–ª–µ–µ —Ç–æ—á–Ω–æ –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç —Ä–∏—Å–∫ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤
    
    **–û—Ü–µ–Ω–∫–∞:**
    ‚Ä¢ < 0 - –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ
    ‚Ä¢ 0-1 - —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ
    ‚Ä¢ 1-2 - —Ö–æ—Ä–æ—à–æ
    ‚Ä¢ > 2 - –æ—Ç–ª–∏—á–Ω–æ
    
    **–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 0.89 - –•–æ—Ä–æ—à–æ, –ø–æ—Ä—Ç—Ñ–µ–ª—å –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç —É–±—ã—Ç–∫–∏**
    """,
    
    'treynor_ratio': """
    üèÜ **–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¢—Ä–µ–π–Ω–æ—Ä–∞** - –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∑–∞ —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ä–∏—Å–∫
    
    **–ß—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç:** –ù–∞—Å–∫–æ–ª—å–∫–æ –≤—ã –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–∏—Ç–µ –±–µ–∑—Ä–∏—Å–∫–æ–≤—ã–µ –≤–ª–æ–∂–µ–Ω–∏—è
    
    **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å:** –£—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ä—ã–Ω–æ—á–Ω—ã–π —Ä–∏—Å–∫ (–±–µ—Ç—É)
    
    **–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:** –ß–µ–º –≤—ã—à–µ - —Ç–µ–º –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —Ä—ã–Ω–æ—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
    
    **–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 0.107 - –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥—Å—Ç–≤–æ –Ω–∞–¥ –æ–±–ª–∏–≥–∞—Ü–∏—è–º–∏**
    """,
    
    'm_squared': """
    üìä **–ú-–∫–≤–∞–¥—Ä–∞—Ç** - –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —ç—Ç–∞–ª–æ–Ω–æ–º
    
    **–ß—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç:** –ö–∞–∫–æ–π –±—ã–ª–∞ –±—ã –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –ø—Ä–∏ —Ä–∏—Å–∫–µ –∫–∞–∫ —É —Ä—ã–Ω–∫–∞
    
    **–ü—Ä–æ—â–µ –≥–æ–≤–æ—Ä—è:** "–ï—Å–ª–∏ –±—ã –º–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å –∏–º–µ–ª —Ç–∞–∫—É—é –∂–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –∫–∞–∫ S&P 500"
    
    **–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: +4.5% - –í—ã –±—ã –æ–±–æ–≥–Ω–∞–ª–∏ —Ä—ã–Ω–æ–∫ –Ω–∞ 4.5% –ø—Ä–∏ —Ä–∞–≤–Ω–æ–º —Ä–∏—Å–∫–µ**
    """,
    
    'jensen_alpha': """
    Œ± **–ê–ª—å—Ñ–∞ –î–∂–µ–Ω—Å–µ–Ω–∞** - –ù–∞–≤—ã–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    
    **–ß—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç:** –ù–∞—Å–∫–æ–ª—å–∫–æ –≤—ã —É–º–Ω–µ–µ —Ä—ã–Ω–∫–∞ –±–ª–∞–≥–æ–¥–∞—Ä—è –≤—ã–±–æ—Ä—É –∞–∫—Ü–∏–π
    
    **–ö–ª—é—á–µ–≤–æ–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å:** –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –∞–ª—å—Ñ–∞ = –≤—ã –¥–æ–±–∞–≤–ª—è–µ—Ç–µ —Ä–µ–∞–ª—å–Ω—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å
    
    **–û—Ü–µ–Ω–∫–∞:**
    ‚Ä¢ > 0 - –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–∏—Ç–µ —Ä—ã–Ω–æ–∫
    ‚Ä¢ = 0 - –∫–∞–∫ —Ä—ã–Ω–æ–∫  
    ‚Ä¢ < 0 - –æ—Ç—Å—Ç–∞–µ—Ç–µ –æ—Ç —Ä—ã–Ω–∫–∞
    
    **–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: +2.3% - –í—ã –¥–æ–±–∞–≤–ª—è–µ—Ç–µ —Ü–µ–Ω–Ω–æ—Å—Ç—å —Å–≤–µ—Ä—Ö —Ä—ã–Ω–æ—á–Ω–æ–π**
    """,
    
    'parametric_var_95': """
    üõ°Ô∏è **Value at Risk (95%)** - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –ø–æ—Ç–µ—Ä–∏ –≤ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –¥–µ–Ω—å
    
    **–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç:** "–° –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 95% –∑–∞ –¥–µ–Ω—å —è –Ω–µ –ø–æ—Ç–µ—Ä—è—é –±–æ–ª—å—à–µ X%"
    
    **–ü—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä:** VaR -2.5% = –≤ 95% –¥–Ω–µ–π –ø–æ—Ç–µ—Ä–∏ –Ω–µ –ø—Ä–µ–≤—ã—Å—è—Ç 2.5%
    
    **–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: -2.5% - –í –æ–±—ã—á–Ω—ã–π –¥–µ–Ω—å —Ä–∏—Å–∫—É–µ—Ç–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–æ 2.5%**
    """,
    
    'cvar_95': """
    ‚ö° **Conditional VaR** - –°—Ä–µ–¥–Ω–∏–µ –ø–æ—Ç–µ—Ä–∏ –≤ –ø–ª–æ—Ö–∏–µ –¥–Ω–∏
    
    **–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç:** "–í —Ö—É–¥—à–∏–µ 5% –¥–Ω–µ–π —è –≤ —Å—Ä–µ–¥–Ω–µ–º —Ç–µ—Ä—è—é X%"
    
    **–í–∞–∂–Ω–µ–µ VaR:** –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é –±–æ–ª—å –≤ –∫—Ä–∏–∑–∏—Å
    
    **–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: -3.8% - –í –∫—Ä–∏–∑–∏—Å–Ω—ã–µ –¥–Ω–∏ —Ç–µ—Ä—è–µ—Ç–µ –≤ —Å—Ä–µ–¥–Ω–µ–º 3.8%**
    """,
    
    # –ü–†–ï–ú–ò–£–ú –ü–û–ö–ê–ó–ê–¢–ï–õ–ò
    'modigliani_ratio': """
    üíé **–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ú–æ–¥–∏–ª—å—è–Ω–∏** - –ó–æ–ª–æ—Ç–æ–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç –æ—Ü–µ–Ω–∫–∏
    
    **–ß—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç:** –ù–∞—Å–∫–æ–ª—å–∫–æ –≤–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ —Ä—ã–Ω–∫–∞ –ø—Ä–∏ —Ç–æ–º –∂–µ —Ä–∏—Å–∫–µ
    
    **–õ—É—á—à–∞—è –º–µ—Ç—Ä–∏–∫–∞:** –î–ª—è –ø—Ä—è–º–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π
    
    **–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:** +2.8% = –≤–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å –Ω–∞ 2.8% –ª—É—á—à–µ —Ä—ã–Ω–∫–∞
    
    **–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: +2.8% - –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥—Å—Ç–≤–æ –Ω–∞–¥ —ç—Ç–∞–ª–æ–Ω–æ–º**
    """,
    
    'information_ratio': """
    üéØ **Information Ratio** - –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å outperformance
    
    **–ß—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç:** –ù–∞—Å–∫–æ–ª—å–∫–æ —Å—Ç–∞–±–∏–ª—å–Ω–æ –≤—ã –æ–±–≥–æ–Ω—è–µ—Ç–µ –±–µ–Ω—á–º–∞—Ä–∫
    
    **–î–ª—è –∫–æ–≥–æ –≤–∞–∂–Ω–æ:** –ê–∫—Ç–∏–≤–Ω—ã–º —É–ø—Ä–∞–≤–ª—è—é—â–∏–º
    
    **–û—Ü–µ–Ω–∫–∞:**
    ‚Ä¢ 0.0-0.2 - –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ–µ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥—Å—Ç–≤–æ
    ‚Ä¢ 0.2-0.5 - —Ö–æ—Ä–æ—à–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
    ‚Ä¢ > 0.5 - –≤—ã–¥–∞—é—â–∞—è—Å—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
    
    **–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 0.15 - –ü—Ä–µ–≤–æ—Å—Ö–æ–¥—Å—Ç–≤–æ –µ—Å—Ç—å, –Ω–æ –º–æ–∂–Ω–æ —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å**
    """,
    
    'tracking_error': """
    üìè **Tracking Error** - –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç —ç—Ç–∞–ª–æ–Ω–∞
    
    **–ß—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç:** –ù–∞—Å–∫–æ–ª—å–∫–æ –≤–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –∏–Ω–¥–µ–∫—Å–∞
    
    **–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç:**
    ‚Ä¢ –ù–∏–∑–∫–∏–π TE (~2%) - –ø–∞—Å—Å–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
    ‚Ä¢ –í—ã—Å–æ–∫–∏–π TE (~8%) - –∞–∫—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
    
    **–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 4.5% - –£–º–µ—Ä–µ–Ω–Ω–æ-–∞–∫—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ**
    """,
    
    'calmar_ratio': """
    ‚öñÔ∏è **–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ö–∞–ª–º–∞—Ä–∞** - –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å vs –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –±–æ–ª—å
    
    **–ß—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç:** –°–∫–æ–ª—å–∫–æ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –∑–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø—Ä–æ—Å–∞–¥–∫—É
    
    **–î–ª—è –∫–æ–≥–æ –≤–∞–∂–Ω–æ:** –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–º –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞–º
    
    **–û—Ü–µ–Ω–∫–∞:**
    ‚Ä¢ < 0.5 - –Ω–∏–∑–∫–∞—è –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –∑–∞ —Ä–∏—Å–∫
    ‚Ä¢ 0.5-1.0 - —Ö–æ—Ä–æ—à–∞—è –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è
    ‚Ä¢ > 1.0 - –æ—Ç–ª–∏—á–Ω–∞—è –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è
    
    **–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 0.80 - –•–æ—Ä–æ—à–∞—è –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –∑–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—ã–µ –ø—Ä–æ—Å–∞–¥–∫–∏**
    """
}

def create_tooltip(metric_name: str) -> str:
    """–°–æ–∑–¥–∞–µ—Ç HTML –¥–ª—è tooltip'–∞"""
    tooltip_text = TOOLTIPS.get(metric_name, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ")
    return f'''
    <div class="tooltip">
        <span class="tooltip-icon">‚ùì</span>
        <span class="tooltip-text">{tooltip_text}</span>
    </div>
    '''

def display_metric_with_tooltip(label: str, value: str, metric_name: str, help_text: str = None):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ—Ç—Ä–∏–∫—É —Å tooltip'–æ–º"""
    col1, col2 = st.columns([4, 1])
    
    with col1:
        st.metric(label, value)
    
    with col2:
        if help_text:
            st.markdown(f"""
            <div style="margin-top: 1.5rem;">
                {create_tooltip(metric_name)}
            </div>
            """, unsafe_allow_html=True)
        else:
            st.markdown(f"""
            <div style="margin-top: 1.5rem;">
                {create_tooltip(metric_name)}
            </div>
            """, unsafe_allow_html=True)

def display_portfolio_analysis(results: Dict, subscription_level: str) -> None:
    """–£–ª—É—á—à–µ–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ —É—Ä–æ–≤–Ω—è–º–∏ –¥–æ—Å—Ç—É–ø–∞"""
    if not results:
        st.error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return
    
    metrics = results.get('basic_metrics', {})
    
    if not metrics:
        st.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏")
        return
    
    # –û–°–ù–û–í–ù–´–ï –ú–ï–¢–†–ò–ö–ò (–¥–ª—è –≤—Å–µ—Ö)
    st.subheader("üìä –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        display_metric_with_tooltip(
            "–ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å", 
            f"{metrics.get('annual_return', 0):.1%}", 
            'annual_return'
        )
    
    with col2:
        display_metric_with_tooltip(
            "–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å", 
            f"{metrics.get('annual_volatility', 0):.1%}", 
            'annual_volatility'
        )
    
    with col3:
        display_metric_with_tooltip(
            "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞", 
            f"{metrics.get('sharpe_ratio', 0):.2f}", 
            'sharpe_ratio'
        )
    
    with col4:
        display_metric_with_tooltip(
            "–ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞", 
            f"{metrics.get('max_drawdown', 0):.1%}", 
            'max_drawdown'
        )
    
    # –ë–ï–¢–ê (–¥–ª—è –≤—Å–µ—Ö)
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        display_metric_with_tooltip(
            "–ë–µ—Ç–∞-–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç", 
            f"{metrics.get('beta', 0):.2f}", 
            'beta'
        )
    
    # –ü–†–û–î–í–ò–ù–£–¢–´–ï –ú–ï–¢–†–ò–ö–ò –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–ò
    efficiency_metrics = results.get('efficiency_metrics', {})
    if efficiency_metrics and subscription_level in ['advanced', 'premium']:
        st.subheader("üéØ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            display_metric_with_tooltip(
                "–ö–æ—ç—Ñ. –°–æ—Ä—Ç–∏–Ω–æ", 
                f"{efficiency_metrics.get('sortino_ratio', 0):.2f}", 
                'sortino_ratio'
            )
        
        with col2:
            display_metric_with_tooltip(
                "–ö–æ—ç—Ñ. –¢—Ä–µ–π–Ω–æ—Ä–∞", 
                f"{efficiency_metrics.get('treynor_ratio', 0):.3f}", 
                'treynor_ratio'
            )
        
        with col3:
            display_metric_with_tooltip(
                "–ú-–∫–≤–∞–¥—Ä–∞—Ç", 
                f"{efficiency_metrics.get('m_squared', 0):.3f}", 
                'm_squared'
            )
        
        with col4:
            display_metric_with_tooltip(
                "–ê–ª—å—Ñ–∞ –î–∂–µ–Ω—Å–µ–Ω–∞", 
                f"{efficiency_metrics.get('jensen_alpha', 0):.3f}", 
                'jensen_alpha'
            )

def display_advanced_risk_analysis(results: Dict, subscription_level: str) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ä–∏—Å–∫–æ–≤"""
    risk_metrics = results.get('risk_metrics', {})
    if not risk_metrics or subscription_level not in ['advanced', 'premium']:
        return
    
    st.subheader("üéØ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤")
    
    # Value at Risk –º–µ—Ç—Ä–∏–∫–∏
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        display_metric_with_tooltip(
            "VaR (95%)", 
            f"{risk_metrics.get('parametric_var_95', 0):.2%}", 
            'parametric_var_95'
        )
    
    with col2:
        display_metric_with_tooltip(
            "CVaR (95%)", 
            f"{risk_metrics.get('cvar_95', 0):.2%}", 
            'cvar_95'
        )
    
    with col3:
        st.metric("VaR (99%)", f"{risk_metrics.get('parametric_var_99', 0):.2%}")
    
    with col4:
        st.metric("CVaR (99%)", f"{risk_metrics.get('cvar_99', 0):.2%}")

def display_premium_efficiency_metrics(results: Dict, subscription_level: str) -> None:
    """–ü—Ä–µ–º–∏—É–º –º–µ—Ç—Ä–∏–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    efficiency_metrics = results.get('efficiency_metrics', {})
    if not efficiency_metrics or subscription_level != 'premium':
        return
    
    st.subheader("üíé –ü—Ä–µ–º–∏—É–º –º–µ—Ç—Ä–∏–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        display_metric_with_tooltip(
            "–ö–æ—ç—Ñ. –ú–æ–¥–∏–ª—å—è–Ω–∏", 
            f"{efficiency_metrics.get('modigliani_ratio', 0):.3f}", 
            'modigliani_ratio'
        )
    
    with col2:
        display_metric_with_tooltip(
            "Information Ratio", 
            f"{efficiency_metrics.get('information_ratio', 0):.3f}", 
            'information_ratio'
        )
    
    with col3:
        display_metric_with_tooltip(
            "Tracking Error", 
            f"{efficiency_metrics.get('tracking_error', 0):.3f}", 
            'tracking_error'
        )
    
    with col4:
        display_metric_with_tooltip(
            "–ö–æ—ç—Ñ. –ö–∞–ª–º–∞—Ä–∞", 
            f"{efficiency_metrics.get('calmar_ratio', 0):.2f}", 
            'calmar_ratio'
        )

def display_portfolio_quality(results: Dict, subscription_level: str) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
    portfolio_quality = results.get('portfolio_quality', {})
    if not portfolio_quality or subscription_level not in ['advanced', 'premium']:
        return
    
    st.subheader("üèÜ –ö–∞—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("–û—Ü–µ–Ω–∫–∞ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏", f"{portfolio_quality.get('diversification_score', 0):.0%}")
    
    with col2:
        st.metric("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–æ–≤", f"{portfolio_quality.get('asset_allocation_score', 0):.0%}")
    
    with col3:
        st.metric("–õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å", f"{portfolio_quality.get('liquidity_score', 0):.0%}")
    
    # –ú–∞—Ç—Ä–∏—Ü–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
    correlation_matrix = portfolio_quality.get('correlation_matrix')
    if correlation_matrix is not None:
        st.subheader("üìä –ú–∞—Ç—Ä–∏—Ü–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π")
        fig = px.imshow(correlation_matrix, 
                       text_auto=True, 
                       aspect="auto",
                       color_continuous_scale='RdBu_r',
                       title="–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–µ–∂–¥—É –∞–∫—Ç–∏–≤–∞–º–∏")
        st.plotly_chart(fig, use_container_width=True)

def display_premium_analytics(results: Dict, subscription_level: str) -> None:
    """–ü—Ä–µ–º–∏—É–º –∞–Ω–∞–ª–∏—Ç–∏–∫–∞"""
    if subscription_level != 'premium':
        return
    
    st.subheader("üíé –ü—Ä–µ–º–∏—É–º –∞–Ω–∞–ª–∏—Ç–∏–∫–∞")
    
    # AI –∏–Ω—Å–∞–π—Ç—ã
    ai_insights = results.get('ai_insights', [])
    if ai_insights:
        st.success("### ü§ñ AI –ò–Ω—Å–∞–π—Ç—ã")
        for insight in ai_insights:
            st.write(insight)
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –±–µ–Ω—á–º–∞—Ä–∫–∞–º–∏
    comparative = results.get('comparative_analysis', {})
    if comparative:
        st.success("### üèÜ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —ç—Ç–∞–ª–æ–Ω–∞–º–∏")
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric("vs S&P 500", f"{comparative.get('outperformance_sp500', 0):.2%}")
        
        with col2:
            st.metric("vs Nasdaq", f"{comparative.get('outperformance_nasdaq', 0):.2%}")
        
        with col3:
            st.metric("Percentile", f"{comparative.get('percentile_ranking', 0):.0%}")
    
    # –û—Ç—Ä–∞—Å–ª–µ–≤–∞—è –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
    sectors = results.get('portfolio_quality', {}).get('sector_diversification', {})
    if sectors:
        st.success("### üåç –û—Ç—Ä–∞—Å–ª–µ–≤–∞—è –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è")
        sector_df = pd.DataFrame(list(sectors.items()), columns=['–°–µ–∫—Ç–æ—Ä', '–î–æ–ª—è'])
        fig = px.pie(sector_df, values='–î–æ–ª—è', names='–°–µ–∫—Ç–æ—Ä', hole=0.4)
        st.plotly_chart(fig, use_container_width=True)

# –ò–ú–ü–û–†–¢–ò–†–£–ï–ú –§–£–ù–ö–¶–ò–ò –ò–ó database.py
from database import (
    get_all_clients, 
    get_client_details, 
    get_portfolio_by_client, 
    generate_subscription_based_recommendations,
    get_subscription_level,
    get_subscription_details,
    can_access_advanced_analytics,
    can_access_premium_features,
    SUBSCRIPTION_FEATURES
)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É Streamlit
st.set_page_config(
    page_title="–Æ–Ω–∏–í–µ—Å—Ç - AI –°–æ–≤–µ—Ç–Ω–∏–∫ –ø–æ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS –î–õ–Ø TOOLTIP'–û–í
st.markdown("""
<style>
.tooltip {
    position: relative;
    display: inline-block;
    cursor: pointer;
}

.tooltip .tooltip-icon {
    color: #666;
    font-size: 0.9em;
    padding: 2px 6px;
    border-radius: 50%;
    background: #f0f0f0;
}

.tooltip .tooltip-text {
    visibility: hidden;
    width: 350px;
    background-color: #1a1a1a;
    color: white;
    text-align: left;
    border-radius: 8px;
    padding: 15px;
    position: absolute;
    z-index: 1000;
    bottom: 125%;
    left: 50%;
    margin-left: -175px;
    opacity: 0;
    transition: opacity 0.3s;
    font-size: 0.85em;
    line-height: 1.5;
    box-shadow: 0 8px 25px rgba(0,0,0,0.3);
    border: 1px solid #333;
    white-space: pre-line;
}

.tooltip:hover .tooltip-text {
    visibility: visible;
    opacity: 1;
}

.tooltip .tooltip-text::after {
    content: "";
    position: absolute;
    top: 100%;
    left: 50%;
    margin-left: -5px;
    border-width: 5px;
    border-style: solid;
    border-color: #1a1a1a transparent transparent transparent;
}

.metric-container {
    display: flex;
    align-items: center;
    gap: 8px;
}

/* –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö */
@media (max-width: 768px) {
    .tooltip .tooltip-text {
        width: 280px;
        margin-left: -140px;
        font-size: 0.8em;
    }
}
</style>
""", unsafe_allow_html=True)

def hash_password(password):
    """–•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è"""
    return hashlib.sha256(password.encode()).hexdigest()

def init_session_state():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏"""
    if 'authenticated' not in st.session_state:
        st.session_state.authenticated = False
    if 'current_user' not in st.session_state:
        st.session_state.current_user = None
    if 'current_page' not in st.session_state:
        st.session_state.current_page = "üìä –î–∞—à–±–æ—Ä–¥"

def display_subscription_badge(subscription_level: str) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π –±–µ–π–¥–∂ –ø–æ–¥–ø–∏—Å–∫–∏"""
    badges = {
        'basic': 'üìä <span style="background: linear-gradient(135deg, #11998e, #38ef7d); color: white; padding: 4px 12px; border-radius: 20px; font-size: 0.8em; font-weight: bold;">–ë–ê–ó–û–í–´–ô</span>',
        'advanced': 'üéØ <span style="background: linear-gradient(135deg, #fc466b, #3f5efb); color: white; padding: 4px 12px; border-radius: 20px; font-size: 0.8em; font-weight: bold;">–ü–†–û–î–í–ò–ù–£–¢–´–ô</span>',
        'premium': 'üíé <span style="background: linear-gradient(135deg, #ffd700, #ff8c00); color: black; padding: 4px 12px; border-radius: 20px; font-size: 0.8em; font-weight: bold;">–ü–†–ï–ú–ò–£–ú</span>'
    }
    return badges.get(subscription_level, badges['basic'])

def login_page():
    """–ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞ –ë–ï–ó –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –ü–û–î–ü–ò–°–ö–ê–•"""
    st.markdown("""
    <style>
        .login-container {
            max-width: 90%;
            width: 400px;
            margin: 10vh auto;
            padding: 2rem;
            background: white;
            border-radius: 20px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            text-align: center;
        }
        .main-title {
            font-size: clamp(2rem, 5vw, 2.8rem);
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            margin-bottom: 0.5rem;
            font-weight: bold;
        }
        .subtitle {
            color: #666;
            margin-bottom: 2rem;
            font-size: clamp(1rem, 3vw, 1.2rem);
        }
    </style>
    """, unsafe_allow_html=True)
    
    st.markdown("""
    <div style='display: flex; justify-content: center; align-items: center; min-height: 80vh; padding: 1rem;'>
        <div class="login-container">
            <h1 class="main-title">ü§ñ –Æ–Ω–∏–í–µ—Å—Ç</h1>
            <div class="subtitle">AI –°–æ–≤–µ—Ç–Ω–∏–∫ –ø–æ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º</div>
    """, unsafe_allow_html=True)
    
    clients = get_all_clients()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –ë–ï–ó –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞—Ä–∏—Ñ–∞—Ö
    selected_client = st.selectbox(
        "üë§ –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞:",
        clients,
        index=0
    )
    
    password = st.text_input("üîí –ü–∞—Ä–æ–ª—å:", type="password", value="demo123")
    
    if st.button("üöÄ –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É", use_container_width=True, type="primary"):
        if password == "demo123":
            st.session_state.authenticated = True
            st.session_state.current_user = selected_client
            st.rerun()
        else:
            st.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'demo123'")
    
    st.markdown("""
            <div style="margin-top: 2rem; padding: 1rem; background: #f8f9fa; border-radius: 10px;">
                <p style="margin: 0; font-size: 0.9rem;"><strong>üí° –î–µ–º–æ-–¥–æ—Å—Ç—É–ø:</strong> –ü–∞—Ä–æ–ª—å: <code>demo123</code></p>
                <p style="margin: 0.5rem 0 0 0; font-size: 0.8rem; color: #666;">–ö–∞–∂–¥—ã–π –∫–ª–∏–µ–Ω—Ç –∏–º–µ–µ—Ç —Ä–∞–∑–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏</p>
            </div>
        </div>
    </div>
    """, unsafe_allow_html=True)

def create_portfolio_metrics(client_data, portfolio_dict, subscription_level: str):
    """–°–æ–∑–¥–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –ø–æ—Ä—Ç—Ñ–µ–ª—è —Å —É—á–µ—Ç–æ–º —É—Ä–æ–≤–Ω—è –ø–æ–¥–ø–∏—Å–∫–∏"""
    portfolio_type = client_data['portfolio_type']
    
    # –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö
    base_metrics = {
        '–∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π': {
            'expected_return': 0.18, 'volatility': 0.32, 'sharpe_ratio': 0.56, 
            'max_drawdown': -0.40, 'beta': 1.25
        },
        '—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π': {
            'expected_return': 0.095, 'volatility': 0.14, 'sharpe_ratio': 0.68, 
            'max_drawdown': -0.20, 'beta': 0.95
        },
        '–¥–æ—Ö–æ–¥–Ω—ã–π': {
            'expected_return': 0.078, 'volatility': 0.11, 'sharpe_ratio': 0.71, 
            'max_drawdown': -0.15, 'beta': 0.75
        },
        '—É–ª—å—Ç—Ä–∞-–∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π': {
            'expected_return': 0.045, 'volatility': 0.05, 'sharpe_ratio': 0.90, 
            'max_drawdown': -0.08, 'beta': 0.35
        }
    }
    
    metrics = base_metrics.get(portfolio_type, base_metrics['—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π'])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è advanced –∏ premium
    if subscription_level in ['advanced', 'premium']:
        advanced_metrics = {
            '–∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π': {
                'sortino_ratio': 0.72, 'treynor_ratio': 0.144, 'm_squared': 0.038,
                'jensen_alpha': 0.028, 'calmar_ratio': 0.45
            },
            '—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π': {
                'sortino_ratio': 0.85, 'treynor_ratio': 0.100, 'm_squared': 0.025,
                'jensen_alpha': 0.015, 'calmar_ratio': 0.48
            },
            '–¥–æ—Ö–æ–¥–Ω—ã–π': {
                'sortino_ratio': 0.88, 'treynor_ratio': 0.104, 'm_squared': 0.022,
                'jensen_alpha': 0.012, 'calmar_ratio': 0.52
            },
            '—É–ª—å—Ç—Ä–∞-–∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π': {
                'sortino_ratio': 1.05, 'treynor_ratio': 0.129, 'm_squared': 0.018,
                'jensen_alpha': 0.008, 'calmar_ratio': 0.56
            }
        }
        metrics.update(advanced_metrics.get(portfolio_type, {}))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–º–∏—É–º –º–µ—Ç—Ä–∏–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è premium
    if subscription_level == 'premium':
        premium_metrics = {
            '–∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π': {
                'modigliani_ratio': 0.035, 'information_ratio': 0.18, 'tracking_error': 0.068
            },
            '—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π': {
                'modigliani_ratio': 0.022, 'information_ratio': 0.12, 'tracking_error': 0.045
            },
            '–¥–æ—Ö–æ–¥–Ω—ã–π': {
                'modigliani_ratio': 0.018, 'information_ratio': 0.10, 'tracking_error': 0.038
            },
            '—É–ª—å—Ç—Ä–∞-–∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π': {
                'modigliani_ratio': 0.012, 'information_ratio': 0.08, 'tracking_error': 0.025
            }
        }
        metrics.update(premium_metrics.get(portfolio_type, {}))
    
    return metrics

def create_growth_chart(client_data, portfolio_type, current_client):
    """–°–æ–∑–¥–∞–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —Ä–æ—Å—Ç–∞"""
    dates = pd.date_range(start='2021-01-01', end='2024-01-01', freq='M')
    
    returns_map = {
        '–∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π': {'mean': 0.015, 'std': 0.08},
        '—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π': {'mean': 0.008, 'std': 0.04},
        '–¥–æ—Ö–æ–¥–Ω—ã–π': {'mean': 0.006, 'std': 0.03},
        '—É–ª—å—Ç—Ä–∞-–∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π': {'mean': 0.004, 'std': 0.02}
    }
    
    return_profile = returns_map.get(portfolio_type, returns_map['—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π'])
    seed = sum(ord(c) for c in current_client)
    np.random.seed(seed)
    
    monthly_returns = np.random.normal(return_profile['mean'], return_profile['std'], len(dates))
    initial = client_data['initial_investment']
    values = [initial]
    
    for ret in monthly_returns:
        values.append(values[-1] * (1 + ret))
    
    return dates, values[1:], initial

def display_subscription_status(client_name: str):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞"""
    subscription_level = get_subscription_level(client_name)
    subscription_details = get_subscription_details(client_name)
    
    st.sidebar.markdown("---")
    st.sidebar.subheader("üíé –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞")
    
    # –ë–µ–π–¥–∂ –ø–æ–¥–ø–∏—Å–∫–∏
    badge_html = display_subscription_badge(subscription_level)
    st.sidebar.markdown(f"<div style='text-align: center; margin-bottom: 1rem;'>{badge_html}</div>", unsafe_allow_html=True)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —Ç–∞—Ä–∏—Ñ–µ
    st.sidebar.write(f"**–¢–∞—Ä–∏—Ñ:** {subscription_details['name']}")
    st.sidebar.write(f"**–°—Ç–æ–∏–º–æ—Å—Ç—å:** {subscription_details['price']} —Ä—É–±/–º–µ—Å")
    st.sidebar.write(f"**–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:** {subscription_details['expires']}")
    
    # –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    st.sidebar.markdown("**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**")
    features = SUBSCRIPTION_FEATURES[subscription_level]['features']
    for feature in features[:3]:
        st.sidebar.write(f"‚Ä¢ {feature}")
    
    # –ö–Ω–æ–ø–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω–µ –ø—Ä–µ–º–∏—É–º
    if subscription_level != 'premium':
        st.sidebar.markdown("---")
        levels = ['basic', 'advanced', 'premium']
        current_index = levels.index(subscription_level) if subscription_level in levels else 0
        next_level = levels[current_index + 1] if current_index < len(levels) - 1 else 'premium'
        next_sub_info = SUBSCRIPTION_FEATURES.get(next_level, {})
        
        if st.sidebar.button(f"üöÄ –£–ª—É—á—à–∏—Ç—å –¥–æ {next_sub_info.get('name', '–ü—Ä–µ–º–∏—É–º')}", use_container_width=True):
            st.session_state.current_page = "üíé –¢–∞—Ä–∏—Ñ—ã"
            st.rerun()

def show_feature_unlock_prompt(feature_name: str, required_level: str, client_name: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–º—Ç –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ñ—É–Ω–∫—Ü–∏–∏"""
    current_level = get_subscription_level(client_name)
    required_plan = SUBSCRIPTION_FEATURES[required_level]
    
    st.warning(f"üîí **{feature_name} –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ —Ç–∞—Ä–∏—Ñ–µ {required_plan['name']}**")
    
    col1, col2 = st.columns([3, 1])
    
    with col1:
        st.write(f"**–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:**")
        for feature in required_plan['features'][:3]:
            st.write(f"‚Ä¢ {feature}")
    
    with col2:
        if st.button(f"üí≥ {required_plan['price']}‚ÇΩ/–º–µ—Å", key=f"unlock_{feature_name}"):
            st.session_state.current_page = "üíé –¢–∞—Ä–∏—Ñ—ã"
            st.rerun()

def display_pricing_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º —Ç–∞—Ä–∏—Ñ–æ–≤"""
    st.title("üíé –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π —Ç–∞—Ä–∏—Ñ")
    st.write("–ù–∞—á–Ω–∏—Ç–µ —Å –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –±–∞–∑–æ–≤–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ –∏ —É–ª—É—á—à–∞–π—Ç–µ –ø–æ –º–µ—Ä–µ —Ä–æ—Å—Ç–∞ –≤–∞—à–∏—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Ç–∞—Ä–∏—Ñ–æ–≤
    col1, col2, col3 = st.columns(3)
    
    for i, level in enumerate(['basic', 'advanced', 'premium']):
        plan = SUBSCRIPTION_FEATURES[level]
        with [col1, col2, col3][i]:
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –±–µ–π–¥–∂–µ–º
            badge_html = display_subscription_badge(level)
            st.markdown(f"<div style='text-align: center; margin-bottom: 1rem;'>{badge_html}</div>", unsafe_allow_html=True)
            
            st.subheader(plan['name'])
            st.metric("–°—Ç–æ–∏–º–æ—Å—Ç—å", f"{plan['price']}‚ÇΩ/–º–µ—Å")
            
            st.write("**–í–∫–ª—é—á–µ–Ω–æ:**")
            for feature in plan['features'][:6]:
                st.write(f"‚úÖ {feature}")
            
            if level == 'basic':
                st.button("üéÅ –ù–∞—á–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ", key=f"btn_{level}", use_container_width=True, type="primary")
            else:
                st.button(f"üí≥ –í—ã–±—Ä–∞—Ç—å {plan['name']}", key=f"btn_{level}", use_container_width=True)

def advanced_analytics_page():
    """–£–õ–£–ß–®–ï–ù–ù–ê–Ø —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    current_client = st.session_state.current_user
    subscription_level = get_subscription_level(current_client)
    
    st.title("üìà –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
    if not can_access_advanced_analytics(current_client):
        show_feature_unlock_prompt("–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", "advanced", current_client)
        return
    
    st.success(f"üéØ –£ –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–µ!")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
    client_data = get_client_details(current_client)
    portfolio_dict = get_portfolio_by_client(current_client)
    
    if not portfolio_dict:
        st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—å")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –†–ê–°–®–ò–†–ï–ù–ù–´–ô –∞–Ω–∞–ª–∏–∑
    with st.spinner("üîç –ü—Ä–æ–≤–æ–¥–∏–º —É–≥–ª—É–±–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è..."):
        analyzer = AdvancedPortfolioAnalysis(portfolio_dict, current_client)
        results = analyzer.comprehensive_analysis()
    
    if results:
        # –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        display_portfolio_analysis(results, subscription_level)
        
        # –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        display_advanced_risk_analysis(results, subscription_level)
        
        # –ü—Ä–µ–º–∏—É–º –º–µ—Ç—Ä–∏–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        display_premium_efficiency_metrics(results, subscription_level)
        
        # –ö–∞—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        display_portfolio_quality(results, subscription_level)
        
        # –ü—Ä–µ–º–∏—É–º –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
        display_premium_analytics(results, subscription_level)
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        st.subheader("üìã –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
        for recommendation in results.get('recommendations', []):
            st.info(recommendation)

def dashboard_page():
    """–ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –° –û–ë–ù–û–í–õ–ï–ù–ù–´–ú–ò –¢–ê–†–ò–§–ê–ú–ò"""
    
    current_client = st.session_state.current_user
    client_data = get_client_details(current_client)
    portfolio_dict = get_portfolio_by_client(current_client)
    subscription_level = get_subscription_level(current_client)
    
    if not client_data or not portfolio_dict:
        st.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞
    has_advanced_access = can_access_advanced_analytics(current_client)
    has_premium_access = can_access_premium_features(current_client)
    subscription_details = get_subscription_details(current_client)
    
    # –ë–µ–π–¥–∂ –ø–æ–¥–ø–∏—Å–∫–∏
    badge_html = display_subscription_badge(subscription_level)
    
    # –ó–ê–ì–û–õ–û–í–û–ö –° –ë–ï–ô–î–ñ–ï–ú –ü–û–î–ü–ò–°–ö–ò
    st.markdown(f'''
    <div style="text-align: center; padding: 2rem; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border-radius: 15px; margin-bottom: 2rem;">
        <h1 style="color: white; margin-bottom: 0.5rem;">ü§ñ –Æ–Ω–∏–í–µ—Å—Ç AI –°–æ–≤–µ—Ç–Ω–∏–∫</h1>
        <h2 style="color: white; margin: 0;">{current_client}</h2>
        <div style="margin-top: 0.5rem;">
            {badge_html}
        </div>
    </div>
    ''', unsafe_allow_html=True)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ä–∞—Å–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    col1, col2, col3 = st.columns([2, 1, 1])
    
    with col1:
        st.markdown(f'<div style="font-size: 1.2rem;">üë§ <strong>{current_client}</strong></div>', unsafe_allow_html=True)
    
    with col2:
        st.metric("–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", f"{client_data['initial_investment']:,.0f} ‚ÇΩ")
    
    with col3:
        if st.button("üö™ –í—ã–π—Ç–∏", use_container_width=True, type="secondary"):
            st.session_state.authenticated = False
            st.session_state.current_user = None
            st.rerun()
    
    st.markdown("---")
    
    # SIDEBAR
    with st.sidebar:
        st.title("üéØ –ù–∞–≤–∏–≥–∞—Ü–∏—è")
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
        page = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", 
                       ["üìä –î–∞—à–±–æ—Ä–¥", "üìà –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", "üíé –¢–∞—Ä–∏—Ñ—ã"],
                       index=0)
        
        if page != st.session_state.current_page:
            st.session_state.current_page = page
            st.rerun()
        
        # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        st.markdown("---")
        clients = get_all_clients()
        new_user = st.selectbox("üë• –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞:", clients, 
                              index=clients.index(current_client))
        
        if new_user != current_client:
            st.session_state.current_user = new_user
            st.rerun()
        
        st.markdown("---")
        
        # –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        col1, col2 = st.columns(2)
        with col1:
            st.metric("–ê–∫—Ç–∏–≤—ã", len(portfolio_dict))
        with col2:
            st.metric("–†–∏—Å–∫", client_data['risk_profile'])
        
        # –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
        display_subscription_status(current_client)
        
        st.markdown("---")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ AI
        st.subheader("ü§ñ –°–æ–≤–µ—Ç—ã")
        recommendations = generate_subscription_based_recommendations(current_client)
        for rec in recommendations[:2]:
            st.info(rec)
    
    # –û–°–ù–û–í–ù–û–ô –ö–û–ù–¢–ï–ù–¢
    
    # 1. –ü—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞
    st.subheader("üë§ –ü—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞")
    col1, col2 = st.columns(2)
    
    with col1:
        st.write(f"**–¢–∏–ø –ø–æ—Ä—Ç—Ñ–µ–ª—è:** {client_data['portfolio_type']}")
        st.write(f"**–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞:** {client_data['risk_profile']}")
        st.write(f"**–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –≥–æ—Ä–∏–∑–æ–Ω—Ç:** {client_data['investment_horizon']}")
    
    with col2:
        st.write(f"**–û–ø—ã—Ç:** {client_data['experience']}")
        st.write(f"**–¶–µ–ª—å:** {client_data['financial_goals']}")
        st.write(f"**–¶–µ–ª–µ–≤–∞—è —Å—É–º–º–∞:** {client_data['target_amount']:,.0f} ‚ÇΩ")
    
    # 2. –û–±–∑–æ—Ä –ø–æ—Ä—Ç—Ñ–µ–ª—è
    st.subheader("üìä –û–±–∑–æ—Ä –ø–æ—Ä—Ç—Ñ–µ–ª—è")
    weights_df = pd.DataFrame(list(portfolio_dict.items()), columns=['–ê–∫—Ç–∏–≤', '–î–æ–ª—è'])
    
    col1, col2 = st.columns([1, 2])
    
    with col1:
        fig_pie = px.pie(weights_df, values='–î–æ–ª—è', names='–ê–∫—Ç–∏–≤', hole=0.3)
        st.plotly_chart(fig_pie, use_container_width=True)
    
    with col2:
        st.dataframe(weights_df, use_container_width=True, hide_index=True)
    
    # 3. –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Å tooltip'–∞–º–∏
    st.subheader("üîç –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏")
    portfolio_metrics = create_portfolio_metrics(client_data, portfolio_dict, subscription_level)
    
    # –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        display_metric_with_tooltip(
            "–û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å", 
            f"{portfolio_metrics['expected_return']:.1%}", 
            'annual_return'
        )
    with col2:
        display_metric_with_tooltip(
            "–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å", 
            f"{portfolio_metrics['volatility']:.1%}", 
            'annual_volatility'
        )
    with col3:
        display_metric_with_tooltip(
            "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞", 
            f"{portfolio_metrics['sharpe_ratio']:.2f}", 
            'sharpe_ratio'
        )
    with col4:
        display_metric_with_tooltip(
            "–ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞", 
            f"{portfolio_metrics['max_drawdown']:.1%}", 
            'max_drawdown'
        )
    
    # –ë–µ—Ç–∞-–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        display_metric_with_tooltip(
            "–ë–µ—Ç–∞-–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç", 
            f"{portfolio_metrics.get('beta', 0):.2f}", 
            'beta'
        )
    
    # –ü–†–û–î–í–ò–ù–£–¢–´–ï –ú–ï–¢–†–ò–ö–ò (–¥–ª—è advanced –∏ premium)
    if subscription_level in ['advanced', 'premium']:
        st.subheader("üéØ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –º–µ—Ç—Ä–∏–∫–∏")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            display_metric_with_tooltip(
                "–ö–æ—ç—Ñ. –°–æ—Ä—Ç–∏–Ω–æ", 
                f"{portfolio_metrics.get('sortino_ratio', 0):.2f}", 
                'sortino_ratio'
            )
        
        with col2:
            display_metric_with_tooltip(
                "–ö–æ—ç—Ñ. –¢—Ä–µ–π–Ω–æ—Ä–∞", 
                f"{portfolio_metrics.get('treynor_ratio', 0):.3f}", 
                'treynor_ratio'
            )
        
        with col3:
            display_metric_with_tooltip(
                "–ú-–∫–≤–∞–¥—Ä–∞—Ç", 
                f"{portfolio_metrics.get('m_squared', 0):.3f}", 
                'm_squared'
            )
        
        with col4:
            display_metric_with_tooltip(
                "–ê–ª—å—Ñ–∞ –î–∂–µ–Ω—Å–µ–Ω–∞", 
                f"{portfolio_metrics.get('jensen_alpha', 0):.3f}", 
                'jensen_alpha'
            )
    
    # –ü–†–ï–ú–ò–£–ú –ú–ï–¢–†–ò–ö–ò (—Ç–æ–ª—å–∫–æ –¥–ª—è premium)
    if subscription_level == 'premium':
        st.subheader("üíé –ü—Ä–µ–º–∏—É–º –º–µ—Ç—Ä–∏–∫–∏")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            display_metric_with_tooltip(
                "–ö–æ—ç—Ñ. –ú–æ–¥–∏–ª—å—è–Ω–∏", 
                f"{portfolio_metrics.get('modigliani_ratio', 0):.3f}", 
                'modigliani_ratio'
            )
        
        with col2:
            display_metric_with_tooltip(
                "Information Ratio", 
                f"{portfolio_metrics.get('information_ratio', 0):.3f}", 
                'information_ratio'
            )
        
        with col3:
            display_metric_with_tooltip(
                "Tracking Error", 
                f"{portfolio_metrics.get('tracking_error', 0):.3f}", 
                'tracking_error'
            )
        
        with col4:
            display_metric_with_tooltip(
                "–ö–æ—ç—Ñ. –ö–∞–ª–º–∞—Ä–∞", 
                f"{portfolio_metrics.get('calmar_ratio', 0):.2f}", 
                'calmar_ratio'
            )
    
    # 4. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ AI - –†–ê–ó–ù–´–ï –î–õ–Ø –†–ê–ó–ù–´–• –ü–û–î–ü–ò–°–û–ö
    st.subheader("ü§ñ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ AI")
    
    recommendations = generate_subscription_based_recommendations(current_client)
    
    for rec in recommendations:
        st.info(rec)
    
    # –ü—Ä–µ–º–∏—É–º —Å–µ–∫—Ü–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤)
    if has_premium_access:
        st.subheader("üíé –ü—Ä–µ–º–∏—É–º –∞–Ω–∞–ª–∏—Ç–∏–∫–∞")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.success("""
            **ü§ñ AI –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º–µ—Å—è—Ü**
            - –û–∂–∏–¥–∞–µ–º—ã–π —Ä–æ—Å—Ç: +4.5%
            - –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: 78%
            - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –î–µ—Ä–∂–∞—Ç—å –ø–æ–∑–∏—Ü–∏–∏
            """)
        
        with col2:
            st.success("""
            **üèÜ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —ç—Ç–∞–ª–æ–Ω–∞–º–∏**
            - –í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å: +15.2%
            - S&P 500: +12.1%
            - Nasdaq: +18.3%
            """)
    elif has_advanced_access:
        # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É–ª—É—á—à–∏—Ç—å –¥–æ –ø—Ä–µ–º–∏—É–º
        st.info("üíé **AI-–ø—Ä–æ–≥–Ω–æ–∑—ã –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –ü—Ä–µ–º–∏—É–º —Ç–∞—Ä–∏—Ñ–µ**")
        if st.button("üíé –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –ü—Ä–µ–º–∏—É–º", key="upgrade_premium"):
            show_feature_unlock_prompt("AI-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞", "premium", current_client)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    init_session_state()
    
    if not st.session_state.authenticated:
        login_page()
    else:
        # –†–æ—É—Ç–∏–Ω–≥ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
        if st.session_state.current_page == "üìä –î–∞—à–±–æ—Ä–¥":
            dashboard_page()
        elif st.session_state.current_page == "üìà –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞":
            advanced_analytics_page()
        elif st.session_state.current_page == "üíé –¢–∞—Ä–∏—Ñ—ã":
            display_pricing_page()

if __name__ == "__main__":
    main()


# database.py - —Ñ–∞–π–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π

import sqlite3
import logging
from typing import Dict, List, Optional, Tuple
from datetime import datetime
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –î–ê–ù–ù–´–ï –û –ü–û–î–ü–ò–°–ö–ê–• –ö–õ–ò–ï–ù–¢–û–í - –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –î–ê–ù–ù–´–ï –° –ù–û–í–´–ú–ò –¢–ê–†–ò–§–ê–ú–ò!
CLIENT_SUBSCRIPTIONS = {
    '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤': {'level': 'premium', 'price': 800, 'expires': '2024-12-31'},
    '–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞': {'level': 'advanced', 'price': 450, 'expires': '2024-11-30'},
    '–ê–ª–µ–∫—Å–µ–π –ö–æ–∑–ª–æ–≤': {'level': 'basic', 'price': 0, 'expires': '2024-10-15'},
    '–ï–ª–µ–Ω–∞ –í–æ–ª–∫–æ–≤–∞': {'level': 'basic', 'price': 0, 'expires': '2024-09-30'},
    '–î–º–∏—Ç—Ä–∏–π –°–º–∏—Ä–Ω–æ–≤': {'level': 'basic', 'price': 0, 'expires': '2024-09-30'}
}

# –û–ü–ò–°–ê–ù–ò–Ø –¢–ê–†–ò–§–û–í –ò –§–£–ù–ö–¶–ò–ô - –£–°–ò–õ–ï–ù–ù–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò –° –ù–û–í–´–ú–ò –ü–û–ö–ê–ó–ê–¢–ï–õ–Ø–ú–ò
SUBSCRIPTION_FEATURES = {
    'basic': {
        'name': '–ë–∞–∑–æ–≤—ã–π',
        'price': 0,
        'features': [
            'üìä –í—Å–µ –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è',
            'üí° –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏',
            'üìà –ê–Ω–∞–ª–∏–∑ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏',
            'üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ—Ä—Ç—Ñ–µ–ª—è',
            'üì± –î–æ—Å—Ç—É–ø —Å –ª—é–±—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤',
            'üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∞–∫—Ç–∏–≤–æ–≤',
            'üéØ –ë–∞–∑–æ–≤—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –∏–¥–µ–∏',
            'üìã –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–ª–µ–π',
            'üìä –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞ –∏ –ë–µ—Ç–∞',
            'üìà –û–±—ä—è—Å–Ω–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π'
        ],
        'limitations': [
            '‚ùå –ë–µ–∑ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞',
            '‚ùå –ë–µ–∑ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–æ –ú–∞—Ä–∫–æ–≤–∏—Ü—É',
            '‚ùå –ë–µ–∑ –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞',
            '‚ùå –ë–µ–∑ AI-–ø—Ä–æ–≥–Ω–æ–∑–æ–≤'
        ]
    },
    'advanced': {
        'name': '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π',
        'price': 450,
        'features': [
            '‚úÖ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ë–∞–∑–æ–≤–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞',
            'üéØ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è',
            'üìâ –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤ (VaR, CVaR)',
            'üìä Stress-testing —Å—Ü–µ–Ω–∞—Ä–∏–∏',
            '‚ö° –¢–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏',
            'üìà –ú–µ—Ç—Ä–∏–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–°–æ—Ä—Ç–∏–Ω–æ, –ö–∞–ª–º–∞—Ä)',
            'üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞',
            'üìä –ú–∞—Ç—Ä–∏—Ü–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π',
            'üéØ –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è',
            'üìà –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –±–µ–Ω—á–º–∞—Ä–∫–∞–º–∏',
            'üìä –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¢—Ä–µ–π–Ω–æ—Ä–∞ –∏ –ú-–∫–≤–∞–¥—Ä–∞—Ç',
            'Œ± –ê–ª—å—Ñ–∞ –î–∂–µ–Ω—Å–µ–Ω–∞ –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞'
        ],
        'upgrade_reason': '–î–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏'
    },
    'premium': {
        'name': '–ü—Ä–µ–º–∏—É–º',
        'price': 800,
        'features': [
            '‚úÖ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞',
            'ü§ñ AI-–ø—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ ML',
            'üèÜ –î–µ—Ç–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —ç—Ç–∞–ª–æ–Ω–∞–º–∏',
            'üöÄ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7',
            'üìà –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞',
            'üíé –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Å–æ–≤–µ—Ç–Ω–∏–∫',
            'üéØ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –∏–¥–µ–∏',
            'üìä –ö–∞—Å—Ç–æ–º–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –∏ –¥–∞—à–±–æ—Ä–¥—ã',
            'üåç –û—Ç—Ä–∞—Å–ª–µ–≤–æ–π –∞–Ω–∞–ª–∏–∑',
            '‚ö° –ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ —Å–∏–º—É–ª—è—Ü–∏–∏',
            'üìä AI –∏–Ω—Å–∞–π—Ç—ã –∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã',
            'üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏',
            'üíé –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ú–æ–¥–∏–ª—å—è–Ω–∏ –∏ Information Ratio',
            'üìè Tracking Error –∏ –ø—Ä–µ–º–∏—É–º –∞–Ω–∞–ª–∏—Ç–∏–∫–∞'
        ],
        'upgrade_reason': '–î–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å AI-–ø–æ–º–æ—â–Ω–∏–∫–æ–º'
    }
}

# –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ü–û–î–ü–ò–°–ö–ê–ú–ò
def get_subscription_level(client_name: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞"""
    subscription = CLIENT_SUBSCRIPTIONS.get(client_name, {})
    return subscription.get('level', 'basic')

def get_subscription_details(client_name: str) -> Dict:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    subscription = CLIENT_SUBSCRIPTIONS.get(client_name, {})
    level = subscription.get('level', 'basic')
    
    details = SUBSCRIPTION_FEATURES.get(level, {}).copy()
    details.update({
        'level': level,
        'price': subscription.get('price', 0),
        'expires': subscription.get('expires', '2024-01-01')
    })
    
    return details

def can_access_advanced_analytics(client_name: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–µ"""
    level = get_subscription_level(client_name)
    return level in ['advanced', 'premium']

def can_access_premium_features(client_name: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏—è–º"""
    return get_subscription_level(client_name) == 'premium'

def can_access_news_analysis(client_name: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –Ω–æ–≤–æ—Å—Ç–Ω–æ–º—É –∞–Ω–∞–ª–∏–∑—É"""
    level = get_subscription_level(client_name)
    return level in ['advanced', 'premium']

# –†–ê–°–®–ò–†–ï–ù–ù–´–ï –î–ê–ù–ù–´–ï –î–õ–Ø –ü–†–ï–ú–ò–£–ú-–ê–ù–ê–õ–ò–¢–ò–ö–ò
PREMIUM_ANALYTICS_DATA = {
    '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤': {
        'ai_predictions': {
            'next_month_return': 0.045,
            'confidence': 0.78,
            'trend': 'bullish',
            'key_drivers': ['—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Å–µ–∫—Ç–æ—Ä', '—Å–Ω–∏–∂–µ–Ω–∏–µ –∏–Ω—Ñ–ª—è—Ü–∏–∏'],
            'risk_warnings': ['–≥–µ–æ–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞–ø—Ä—è–∂–µ–Ω–Ω–æ—Å—Ç—å', '–≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å —Ä—ã–Ω–∫–∞'],
            'optimal_rebalance': {'TSLA': -0.02, 'NVDA': -0.01, 'BND': 0.03}
        },
        'benchmark_comparison': {
            'sp500': {'return': 0.121, 'volatility': 0.15, 'sharpe': 0.81},
            'nasdaq': {'return': 0.183, 'volatility': 0.22, 'sharpe': 0.83},
            'russian_index': {'return': 0.085, 'volatility': 0.18, 'sharpe': 0.47},
            'your_portfolio': {'return': 0.150, 'volatility': 0.20, 'sharpe': 0.75},
            'percentile_ranking': 0.72
        },
        'ml_insights': [
            'üìà **–í—ã—Å–æ–∫–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º —Å–µ–∫—Ç–æ—Ä–æ–º** (0.85)',
            '‚ö° **–ü–æ—Ä—Ç—Ñ–µ–ª—å –ø–µ—Ä–µ–≤–µ—à–µ–Ω –≤ –∞–∫—Ü–∏–∏ —Ä–æ—Å—Ç–∞** - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫—É',
            'üõ°Ô∏è **–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –∑–∞—â–∏—Ç–Ω—ã–µ –∞–∫—Ç–∏–≤—ã** –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è VaR',
            'üéØ **–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–ª—è —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏** - –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª +2.3%',
            'üìä **Stress-test –ø–æ–∫–∞–∑–∞–ª —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å** –∫ —É–º–µ—Ä–µ–Ω–Ω—ã–º –∫–æ—Ä—Ä–µ–∫—Ü–∏—è–º'
        ],
        'sector_analysis': {
            '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏': 0.35,
            '–§–∏–Ω–∞–Ω—Å—ã': 0.20, 
            '–ó–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ': 0.15,
            '–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã': 0.12,
            '–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞': 0.08,
            '–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å': 0.06,
            '–ú–∞—Ç–µ—Ä–∏–∞–ª—ã': 0.04
        }
    },
    '–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞': {
        'ai_predictions': {
            'next_month_return': 0.028,
            'confidence': 0.72,
            'trend': 'neutral',
            'key_drivers': ['–ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–∏–π —Å–µ–∫—Ç–æ—Ä', '–¥–∏–Ω–∞–º–∏–∫–∞ —Ä—É–±–ª—è'],
            'risk_warnings': ['–∏–Ω—Ñ–ª—è—Ü–∏–æ–Ω–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ', '–∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞–≤–æ–∫ –¶–ë'],
            'optimal_rebalance': {'VTI': 0.02, 'BND': -0.02, 'GLD': 0.01}
        },
        'benchmark_comparison': {
            'sp500': {'return': 0.121, 'volatility': 0.15, 'sharpe': 0.81},
            'nasdaq': {'return': 0.183, 'volatility': 0.22, 'sharpe': 0.83},
            'russian_index': {'return': 0.085, 'volatility': 0.18, 'sharpe': 0.47},
            'your_portfolio': {'return': 0.100, 'volatility': 0.16, 'sharpe': 0.63},
            'percentile_ranking': 0.58
        },
        'ml_insights': [
            'üí∞ **–•–æ—Ä–æ—à–∞—è –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ —Å–µ–∫—Ç–æ—Ä–∞–º**',
            'üìä **–£–º–µ—Ä–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞** —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–æ—Ñ–∏–ª—é',
            'üîÑ **–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∏–≤–∏–¥–µ–Ω–¥—ã**',
            '‚è∞ **–ò–¥–µ–∞–ª—å–Ω—ã–π –≥–æ—Ä–∏–∑–æ–Ω—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π 3-5 –ª–µ—Ç**',
            'üéØ **–ü–æ—Ä—Ç—Ñ–µ–ª—å –æ–ø—Ç–∏–º–∞–ª–µ–Ω –¥–ª—è –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π**'
        ],
        'sector_analysis': {
            '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏': 0.25,
            '–§–∏–Ω–∞–Ω—Å—ã': 0.18,
            '–ó–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ': 0.15,
            '–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã': 0.20,
            '–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞': 0.12,
            '–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å': 0.08,
            '–ú–∞—Ç–µ—Ä–∏–∞–ª—ã': 0.02
        }
    }
}

# –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ü–†–ï–ú–ò–£–ú-–ê–ù–ê–õ–ò–¢–ò–ö–ò
def get_ai_predictions(client_name: str) -> Optional[Dict]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç AI-–ø—Ä–æ–≥–Ω–æ–∑—ã –¥–ª—è –ø—Ä–µ–º–∏—É–º –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    if not can_access_premium_features(client_name):
        return None
    return PREMIUM_ANALYTICS_DATA.get(client_name, {}).get('ai_predictions')

def get_benchmark_comparison(client_name: str) -> Optional[Dict]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —ç—Ç–∞–ª–æ–Ω–Ω—ã–º–∏ –∏–Ω–¥–µ–∫—Å–∞–º–∏"""
    if not can_access_premium_features(client_name):
        return None
    return PREMIUM_ANALYTICS_DATA.get(client_name, {}).get('benchmark_comparison')

def get_ml_insights(client_name: str) -> List[str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ML –∏–Ω—Å–∞–π—Ç—ã –¥–ª—è –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
    if not can_access_premium_features(client_name):
        return []
    return PREMIUM_ANALYTICS_DATA.get(client_name, {}).get('ml_insights', [])

def get_sector_analysis(client_name: str) -> Optional[Dict]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Ä–∞—Å–ª–µ–≤–æ–π –∞–Ω–∞–ª–∏–∑"""
    if not can_access_premium_features(client_name):
        return None
    return PREMIUM_ANALYTICS_DATA.get(client_name, {}).get('sector_analysis')

# –î–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
CLIENTS_DETAILED_DATA = {
    '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤': {
        'name': '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤',
        'portfolio_name': '–∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π',
        'description': '–ú–æ–ª–æ–¥–æ–π –∏–Ω–≤–µ—Å—Ç–æ—Ä, –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç –∫–∞–ø–∏—Ç–∞–ª–∞',
        'risk_profile': '–æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π',
        'investment_horizon': '15+ –ª–µ—Ç',
        'experience': '–≠–∫—Å–ø–µ—Ä—Ç',
        'financial_goals': '–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ñ–æ–Ω–¥–∞, –≤–µ–Ω—á—É—Ä–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏',
        'portfolio_type': '–∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π',
        'risk_tolerance': 0.85,
        'diversification_level': '–Ω–∏–∑–∫–∏–π',
        'initial_investment': 500000,
        'target_amount': 5000000,
        'key_metrics': {
            'expected_return': 0.18,
            'volatility': 0.32,
            'sharpe_ratio': 0.56
        }
    },
    '–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞': {
        'name': '–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞',
        'portfolio_name': '–∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π',
        'description': '–ú–æ–ª–æ–¥–∞—è –∏–Ω–≤–µ—Å—Ç–æ—Ä, –≥–æ—Ç–æ–≤–∞—è –∫ —Ä–∏—Å–∫—É –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞',
        'risk_profile': '–≤—ã—Å–æ–∫–∏–π',
        'investment_horizon': '5-7 –ª–µ—Ç',
        'experience': '–ù–∞—á–∏–Ω–∞—é—â–∏–π',
        'financial_goals': '–£—Å–∫–æ—Ä–µ–Ω–Ω–æ–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ –Ω–∞ –∂–∏–ª—å–µ',
        'portfolio_type': '–∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π',
        'risk_tolerance': 0.70,
        'diversification_level': '—Å—Ä–µ–¥–Ω–∏–π',
        'initial_investment': 300000,
        'target_amount': 800000,
        'key_metrics': {
            'expected_return': 0.15,
            'volatility': 0.25,
            'sharpe_ratio': 0.60
        }
    },
    '–ê–ª–µ–∫—Å–µ–π –ö–æ–∑–ª–æ–≤': {
        'name': '–ê–ª–µ–∫—Å–µ–π –ö–æ–∑–ª–æ–≤',
        'portfolio_name': '—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π',
        'description': '–°–µ–º–µ–π–Ω—ã–π –∏–Ω–≤–µ—Å—Ç–æ—Ä —Å —É–º–µ—Ä–µ–Ω–Ω—ã–º–∏ –∞–ø–ø–µ—Ç–∏—Ç–∞–º–∏ –∫ —Ä–∏—Å–∫—É',
        'risk_profile': '—É–º–µ—Ä–µ–Ω–Ω—ã–π',
        'investment_horizon': '7-10 –ª–µ—Ç',
        'experience': '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π',
        'financial_goals': '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–µ–π, –ø–æ–∫—É–ø–∫–∞ –∑–∞–≥–æ—Ä–æ–¥–Ω–æ–≥–æ –¥–æ–º–∞',
        'portfolio_type': '—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π',
        'risk_tolerance': 0.55,
        'diversification_level': '–æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π',
        'initial_investment': 800000,
        'target_amount': 2500000,
        'key_metrics': {
            'expected_return': 0.095,
            'volatility': 0.14,
            'sharpe_ratio': 0.68
        }
    },
    '–ï–ª–µ–Ω–∞ –í–æ–ª–∫–æ–≤–∞': {
        'name': '–ï–ª–µ–Ω–∞ –í–æ–ª–∫–æ–≤–∞',
        'portfolio_name': '–¥–æ—Ö–æ–¥–Ω—ã–π',
        'description': '–û–ø—ã—Ç–Ω—ã–π –∏–Ω–≤–µ—Å—Ç–æ—Ä, –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥',
        'risk_profile': '—Å—Ä–µ–¥–Ω–∏–π',
        'investment_horizon': '10+ –ª–µ—Ç',
        'experience': '–û–ø—ã—Ç–Ω—ã–π',
        'financial_goals': '–ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ –¥–ª—è –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞ –Ω–∞ –ø–µ–Ω—Å–∏—é',
        'portfolio_type': '–¥–æ—Ö–æ–¥–Ω—ã–π',
        'risk_tolerance': 0.45,
        'diversification_level': '–≤—ã—Å–æ–∫–∏–π',
        'initial_investment': 1200000,
        'target_amount': 4000000,
        'key_metrics': {
            'expected_return': 0.078,
            'volatility': 0.11,
            'sharpe_ratio': 0.71
        }
    },
    '–î–º–∏—Ç—Ä–∏–π –°–º–∏—Ä–Ω–æ–≤': {
        'name': '–î–º–∏—Ç—Ä–∏–π –°–º–∏—Ä–Ω–æ–≤',
        'portfolio_name': '—É–ª—å—Ç—Ä–∞-–∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π',
        'description': '–ü–µ–Ω—Å–∏–æ–Ω–µ—Ä, –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–∞',
        'risk_profile': '–æ—á–µ–Ω—å –Ω–∏–∑–∫–∏–π',
        'investment_horizon': '1-3 –≥–æ–¥–∞',
        'experience': '–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π',
        'financial_goals': '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è –æ—Ç –∏–Ω—Ñ–ª—è—Ü–∏–∏',
        'portfolio_type': '—É–ª—å—Ç—Ä–∞-–∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π',
        'risk_tolerance': 0.15,
        'diversification_level': '—Å—Ä–µ–¥–Ω–∏–π',
        'initial_investment': 2000000,
        'target_amount': 2200000,
        'key_metrics': {
            'expected_return': 0.045,
            'volatility': 0.05,
            'sharpe_ratio': 0.90
        }
    }
}

class PortfolioDatabase:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π
    """
    
    def __init__(self, db_path: str = 'uniwest.db'):
        self.db_path = db_path
        self._init_database()
    
    def _get_connection(self) -> sqlite3.Connection:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        try:
            conn = sqlite3.connect(self.db_path)
            conn.row_factory = sqlite3.Row
            return conn
        except sqlite3.Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise
    
    def _init_database(self) -> None:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–ø–æ–ª–Ω—è–µ—Ç –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–º–∏
        """
        conn = None
        try:
            conn = self._get_connection()
            cursor = conn.cursor()
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS portfolios (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    name TEXT UNIQUE NOT NULL,
                    description TEXT,
                    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    last_modified TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∞–∫—Ç–∏–≤–æ–≤ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—è—Ö
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS portfolio_assets (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    portfolio_id INTEGER NOT NULL,
                    ticker TEXT NOT NULL,
                    weight REAL NOT NULL CHECK (weight >= 0 AND weight <= 1),
                    FOREIGN KEY (portfolio_id) REFERENCES portfolios (id) ON DELETE CASCADE,
                    UNIQUE(portfolio_id, ticker)
                )
            ''')
            
            conn.commit()
            logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–º–∏
            self._seed_demo_data(conn)
            
        except sqlite3.Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise
        finally:
            if conn:
                conn.close()
    
    def _seed_demo_data(self, conn: sqlite3.Connection) -> None:
        """
        –ó–∞–ø–æ–ª–Ω—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–º–∏
        """
        try:
            cursor = conn.cursor()
            
            # –î–µ–º–æ-–ø–æ—Ä—Ç—Ñ–µ–ª–∏ (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –∫–ª–∏–µ–Ω—Ç–∞–º –∏–∑ app.py)
            demo_portfolios = [
                ("–∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π", "–ü–æ—Ä—Ç—Ñ–µ–ª—å –ò–≤–∞–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞ - –≤—ã—Å–æ–∫–æ—Ä–∏—Å–∫–æ–≤—ã–µ –∞–∫—Ç–∏–≤—ã"),
                ("—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π", "–ü–æ—Ä—Ç—Ñ–µ–ª—å –ê–ª–µ–∫—Å–µ—è –ö–æ–∑–ª–æ–≤–∞ - –±–∞–ª–∞–Ω—Å —Ä–æ—Å—Ç–∞ –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏"),
                ("–¥–æ—Ö–æ–¥–Ω—ã–π", "–ü–æ—Ä—Ç—Ñ–µ–ª—å –ï–ª–µ–Ω—ã –í–æ–ª–∫–æ–≤–∞ - –¥–∏–≤–∏–¥–µ–Ω–¥–Ω—ã–µ –∞–∫—Ü–∏–∏"),
                ("—É–ª—å—Ç—Ä–∞-–∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π", "–ü–æ—Ä—Ç—Ñ–µ–ª—å –î–º–∏—Ç—Ä–∏—è –°–º–∏—Ä–Ω–æ–≤–∞ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞")
            ]
            
            for portfolio_name, description in demo_portfolios:
                cursor.execute('''
                    INSERT OR IGNORE INTO portfolios (name, description) 
                    VALUES (?, ?)
                ''', (portfolio_name, description))
            
            # –ê–∫—Ç–∏–≤—ã –¥–ª—è –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π (—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞)
            portfolios_assets = {
                "–∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π": {
                    'TSLA': 0.25, 'NVDA': 0.20, 'AMD': 0.15, 'ARKK': 0.15,
                    'SQ': 0.10, 'BTC-USD': 0.10, 'ETH-USD': 0.05
                },
                "—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π": {
                    'VTI': 0.25, 'VXUS': 0.15, 'BND': 0.20, 'VNQ': 0.10,
                    'GLD': 0.08, 'AAPL': 0.07, 'MSFT': 0.07, 'JPM': 0.05, 'Cash': 0.03
                },
                "–¥–æ—Ö–æ–¥–Ω—ã–π": {
                    'VYM': 0.20, 'SCHD': 0.18, 'T': 0.10, 'VZ': 0.09,
                    'XOM': 0.08, 'PFE': 0.08, 'JNJ': 0.07, 'PG': 0.07, 'O': 0.06, 'Cash': 0.07
                },
                "—É–ª—å—Ç—Ä–∞-–∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π": {
                    'BND': 0.40, 'GOVT': 0.25, 'SHY': 0.15, 'JNJ': 0.08,
                    'PG': 0.07, 'Cash': 0.05
                }
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è
            for portfolio_name, assets in portfolios_assets.items():
                cursor.execute('SELECT id FROM portfolios WHERE name = ?', (portfolio_name,))
                result = cursor.fetchone()
                
                if result:
                    portfolio_id = result[0]
                    
                    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∞–∫—Ç–∏–≤—ã
                    cursor.execute('DELETE FROM portfolio_assets WHERE portfolio_id = ?', (portfolio_id,))
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∞–∫—Ç–∏–≤—ã
                    for ticker, weight in assets.items():
                        cursor.execute('''
                            INSERT INTO portfolio_assets (portfolio_id, ticker, weight) 
                            VALUES (?, ?, ?)
                        ''', (portfolio_id, ticker, weight))
            
            conn.commit()
            logger.info("–î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
            
        except sqlite3.Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–º–∏: {e}")
            conn.rollback()
            raise
    
    def get_portfolio(self, portfolio_name: str) -> Optional[Dict[str, float]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Ä—Ç—Ñ–µ–ª—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ –∏–º–µ–Ω–∏
        """
        conn = None
        try:
            conn = self._get_connection()
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT pa.ticker, pa.weight 
                FROM portfolio_assets pa 
                JOIN portfolios p ON pa.portfolio_id = p.id 
                WHERE p.name = ?
                ORDER BY pa.weight DESC
            ''', (portfolio_name,))
            
            assets = {}
            total_weight = 0.0
            
            for row in cursor.fetchall():
                ticker = row['ticker']
                weight = row['weight']
                assets[ticker] = weight
                total_weight += weight
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–µ—Å–∞ –µ—Å–ª–∏ —Å—É–º–º–∞ –Ω–µ —Ä–∞–≤–Ω–∞ 1.0
            if assets and abs(total_weight - 1.0) > 0.001:
                assets = {ticker: weight/total_weight for ticker, weight in assets.items()}
                logger.warning(f"–í–µ—Å–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è '{portfolio_name}' –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω—ã")
            
            return assets if assets else None
            
        except sqlite3.Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è '{portfolio_name}': {e}")
            return None
        finally:
            if conn:
                conn.close()

    def get_all_portfolios(self) -> List[Tuple[str, str]]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π
        """
        conn = None
        try:
            conn = self._get_connection()
            cursor = conn.cursor()
            
            cursor.execute('SELECT name, description FROM portfolios ORDER BY name')
            return [(row['name'], row['description']) for row in cursor.fetchall()]
            
        except sqlite3.Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π: {e}")
            return []
        finally:
            if conn:
                conn.close()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    PortfolioDatabase()

def get_portfolio(portfolio_name: str) -> Optional[Dict[str, float]]:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Ä—Ç—Ñ–µ–ª—å (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    db = PortfolioDatabase()
    return db.get_portfolio(portfolio_name)

def get_all_portfolios() -> List[Tuple[str, str]]:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –ø–æ—Ä—Ç—Ñ–µ–ª–∏ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    db = PortfolioDatabase()
    return db.get_all_portfolios()

# –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏
def get_client_details(client_name: str) -> Optional[Dict]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ"""
    client_data = CLIENTS_DETAILED_DATA.get(client_name)
    if client_data:
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ –≤ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å app.py
        client_data_with_name = client_data.copy()
        client_data_with_name['name'] = client_name
        return client_data_with_name
    return None

def get_all_clients() -> List[str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    return list(CLIENTS_DETAILED_DATA.keys())

def get_portfolio_by_client(client_name: str) -> Optional[Dict[str, float]]:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø–æ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞"""
    client_data = CLIENTS_DETAILED_DATA.get(client_name)
    if not client_data:
        return None
    
    portfolio_name = client_data['portfolio_name']
    return get_portfolio(portfolio_name)

# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô
def analyze_diversification(portfolio: Dict[str, float], client_data: Dict) -> List[str]:
    """–ê–Ω–∞–ª–∏–∑ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
    recommendations = []
    num_assets = len(portfolio)
    max_weight = max(portfolio.values()) if portfolio else 0
    
    # –ê–Ω–∞–ª–∏–∑ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–æ–≤
    if num_assets < 5:
        recommendations.append("üîÑ **–£–≤–µ–ª–∏—á—å—Ç–µ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—é**: –î–æ–±–∞–≤—å—Ç–µ –µ—â–µ 2-3 –∞–∫—Ç–∏–≤–∞ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è —Ä–∏—Å–∫–∞")
    elif num_assets > 12:
        recommendations.append("‚öñÔ∏è **–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –ø–æ—Ä—Ç—Ñ–µ–ª—å**: –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–æ–≤ –º–æ–∂–µ—Ç —É—Å–ª–æ–∂–Ω–∏—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
    
    # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏
    if max_weight > 0.25:
        top_asset = max(portfolio, key=portfolio.get)
        recommendations.append(f"üìâ **–°–Ω–∏–∑—å—Ç–µ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—é**: –ê–∫—Ç–∏–≤ {top_asset} —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {max_weight:.1%} - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —É–º–µ–Ω—å—à–µ–Ω–∏–µ –¥–æ–ª–∏")
    
    # –ê–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
    if has_high_correlation_assets(portfolio):
        recommendations.append("üåç **–î–æ–±–∞–≤—å—Ç–µ –Ω–µ–∫–æ—Ä—Ä–µ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤—ã**: –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∑–æ–ª–æ—Ç–æ (GLD) –∏–ª–∏ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ ETF (VXUS) –¥–ª—è –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏")
    
    return recommendations

def analyze_risk_profile(portfolio: Dict[str, float], client_data: Dict) -> List[str]:
    """–ê–Ω–∞–ª–∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è –ø—Ä–æ—Ñ–∏–ª—é —Ä–∏—Å–∫–∞"""
    recommendations = []
    risk_tolerance = client_data.get('risk_tolerance', 0.5)
    portfolio_risk = calculate_portfolio_risk(portfolio)
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∏—Å–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è —Å —Ç–æ–ª–µ—Ä–∞–Ω—Ç–Ω–æ—Å—Ç—å—é –∫–ª–∏–µ–Ω—Ç–∞
    if portfolio_risk > risk_tolerance + 0.2:
        recommendations.append("üõ°Ô∏è **–°–Ω–∏–∑—å—Ç–µ —Ä–∏—Å–∫ –ø–æ—Ä—Ç—Ñ–µ–ª—è**: –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –≤–∞—à—É —Ç–æ–ª–µ—Ä–∞–Ω—Ç–Ω–æ—Å—Ç—å")
    elif portfolio_risk < risk_tolerance - 0.2:
        recommendations.append("üöÄ **–£–≤–µ–ª–∏—á—å—Ç–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–æ—Å—Ç–∞**: –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –∞–∫—Ü–∏–π —Ä–æ—Å—Ç–∞ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏")
    
    # –ê–Ω–∞–ª–∏–∑ –∑–∞—â–∏—Ç–Ω—ã—Ö –∞–∫—Ç–∏–≤–æ–≤
    defensive_assets_weight = sum(weight for asset, weight in portfolio.items() 
                                if asset in ['BND', 'GOVT', 'SHY', 'Cash', 'GLD', 'JNJ', 'PG'])
    
    if client_data['risk_profile'] in ['–Ω–∏–∑–∫–∏–π', '–æ—á–µ–Ω—å –Ω–∏–∑–∫–∏–π'] and defensive_assets_weight < 0.4:
        recommendations.append("üè¶ **–£–≤–µ–ª–∏—á—å—Ç–µ –¥–æ–ª—é –∑–∞—â–∏—Ç–Ω—ã—Ö –∞–∫—Ç–∏–≤–æ–≤**: –î–æ–±–∞–≤—å—Ç–µ –æ–±–ª–∏–≥–∞—Ü–∏–∏ (BND) –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è")
    
    return recommendations

def analyze_asset_allocation(portfolio: Dict[str, float], client_data: Dict) -> List[str]:
    """–ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–æ–≤"""
    recommendations = []
    
    # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–∫—Ç–∏–≤–æ–≤
    stocks_weight = sum(weight for asset, weight in portfolio.items() 
                       if not is_defensive_asset(asset))
    bonds_weight = sum(weight for asset, weight in portfolio.items() 
                      if asset in ['BND', 'GOVT', 'SHY'])
    cash_weight = portfolio.get('Cash', 0)
    crypto_weight = sum(weight for asset, weight in portfolio.items() 
                       if 'BTC' in asset or 'ETH' in asset)
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–ø—É –ø–æ—Ä—Ç—Ñ–µ–ª—è
    portfolio_type = client_data['portfolio_type']
    
    if portfolio_type == '–∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π' and stocks_weight < 0.7:
        recommendations.append("üìà **–£–≤–µ–ª–∏—á—å—Ç–µ –¥–æ–ª—é –∞–∫—Ü–∏–π**: –î–ª—è –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ü–µ–ª–µ—Å–æ–æ–±—Ä–∞–∑–Ω–æ 70-80% –≤ –∞–∫—Ü–∏—è—Ö")
    
    elif portfolio_type == '—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π' and not (0.4 <= stocks_weight <= 0.6):
        recommendations.append("‚öñÔ∏è **–ë–∞–ª–∞–Ω—Å–∏—Ä—É–π—Ç–µ –ø–æ—Ä—Ç—Ñ–µ–ª—å**: –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ 50/50 –∏–ª–∏ 60/40 –º–µ–∂–¥—É –∞–∫—Ü–∏—è–º–∏ –∏ –æ–±–ª–∏–≥–∞—Ü–∏—è–º–∏")
    
    elif portfolio_type == '–¥–æ—Ö–æ–¥–Ω—ã–π' and bonds_weight < 0.3:
        recommendations.append("üèõÔ∏è **–£–≤–µ–ª–∏—á—å—Ç–µ –¥–æ–ª—é –æ–±–ª–∏–≥–∞—Ü–∏–π**: –î–ª—è –¥–æ—Ö–æ–¥–Ω–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 30-40% –≤ –æ–±–ª–∏–≥–∞—Ü–∏—è—Ö")
    
    elif portfolio_type == '—É–ª—å—Ç—Ä–∞-–∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π' and bonds_weight < 0.5:
        recommendations.append("üõ°Ô∏è **–£–≤–µ–ª–∏—á—å—Ç–µ –¥–æ–ª—é –∑–∞—â–∏—Ç–Ω—ã—Ö –∞–∫—Ç–∏–≤–æ–≤**: –î–ª—è –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 50-70% –≤ –æ–±–ª–∏–≥–∞—Ü–∏—è—Ö")
    
    # –ê–Ω–∞–ª–∏–∑ –¥–µ–Ω–µ–∂–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
    if cash_weight < 0.03:
        recommendations.append("üíµ **–°–æ–∑–¥–∞–π—Ç–µ –¥–µ–Ω–µ–∂–Ω—ã–π —Ä–µ–∑–µ—Ä–≤**: –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–µ—Ä–∂–∞—Ç—å 3-5% –Ω–∞–ª–∏—á–Ω–æ—Å—Ç–∏ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π")
    elif cash_weight > 0.1:
        recommendations.append("üí∞ **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–∑–±—ã—Ç–æ—á–Ω—É—é –Ω–∞–ª–∏—á–Ω–æ—Å—Ç—å**: –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Å—Ç–∏ cash –≤ –¥–æ—Ö–æ–¥–Ω—ã–µ –∞–∫—Ç–∏–≤—ã")
    
    # –ê–Ω–∞–ª–∏–∑ –∫—Ä–∏–ø—Ç–æ-—ç–∫—Å–ø–æ–∑–∏—Ü–∏–∏
    if crypto_weight > 0.1 and client_data['risk_profile'] in ['–Ω–∏–∑–∫–∏–π', '–æ—á–µ–Ω—å –Ω–∏–∑–∫–∏–π']:
        recommendations.append("‚ö° **–°–Ω–∏–∑—å—Ç–µ –¥–æ–ª—é –∫—Ä–∏–ø—Ç–æ–∞–∫—Ç–∏–≤–æ–≤**: –î–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è —Ä–∏—Å–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–µ –±–æ–ª–µ–µ 5% –≤ –∫—Ä–∏–ø—Ç–æ")
    
    return recommendations

def generate_tactical_recommendations(client_data: Dict) -> List[str]:
    """–¢–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–π —Ä—ã–Ω–æ—á–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏"""
    recommendations = []
    portfolio_type = client_data['portfolio_type']
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π
    if portfolio_type == '–∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π':
        recommendations.extend([
            "üéØ **–§–æ–∫—É—Å –Ω–∞ —Ä–æ—Å—Ç**: –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö ETF (QQQ, ARKK)",
            "‚è∞ **–†–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ —Ä–∞–∑ –≤ –∫–≤–∞—Ä—Ç–∞–ª**: –ê–∫—Ç–∏–≤–Ω–æ —É–ø—Ä–∞–≤–ª—è–π—Ç–µ –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º –¥–ª—è –º–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏–∏ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏",
            "üìä **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏**: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å—Ç–æ–ø-–ª–æ—Å—Å —É—Ä–æ–≤–Ω–∏ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Å–∏–ª—å–Ω—ã—Ö –ø—Ä–æ—Å–∞–¥–æ–∫"
        ])
    
    elif portfolio_type == '—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π':
        recommendations.extend([
            "üîÑ **–†–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ —Ä–∞–∑ –≤ 6 –º–µ—Å—è—Ü–µ–≤**: –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —Ü–µ–ª–µ–≤–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–æ–≤",
            "üåç **–ì–ª–æ–±–∞–ª—å–Ω–∞—è –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è**: –î–æ–±–∞–≤—å—Ç–µ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ ETF (VXUS, EFA)",
            "üìà **–î–∏–≤–∏–¥–µ–Ω–¥–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è**: –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–∏–≤–∏–¥–µ–Ω–¥–Ω—ã–µ –∞—Ä–∏—Å—Ç–æ–∫—Ä–∞—Ç—ã –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞"
        ])
    
    elif portfolio_type == '–¥–æ—Ö–æ–¥–Ω—ã–π':
        recommendations.extend([
            "üíµ **–†–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–≤–∏–¥–µ–Ω–¥–æ–≤**: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ DRIP –¥–ª—è —Å–ª–æ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞",
            "üè¢ **REIT –∏ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞**: –î–æ–±–∞–≤—å—Ç–µ —Ä–∏–µ–ª-—ç—Å—Ç–µ–π—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –¥–ª—è –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–æ—Ö–æ–¥–∞",
            "üìÖ **–ï–∂–µ–∫–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥**: –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –¥–∏–≤–∏–¥–µ–Ω–¥–Ω—ã—Ö –≤—ã–ø–ª–∞—Ç"
        ])
    
    else:  # –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π
        recommendations.extend([
            "üõ°Ô∏è **–ó–∞—â–∏—Ç–∞ –∫–∞–ø–∏—Ç–∞–ª–∞**: –§–æ–∫—É—Å –Ω–∞ –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –∏ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–±–ª–∏–≥–∞—Ü–∏–∏",
            "üìâ **–ú–∏–Ω–∏–º–∏–∑–∞—Ü–∏—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏**: –ò–∑–±–µ–≥–∞–π—Ç–µ –≤—ã—Å–æ–∫–æ—Ä–∏—Å–∫–æ–≤—ã—Ö –∞–∫—Ç–∏–≤–æ–≤",
            "üè¶ **–õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å**: –î–µ—Ä–∂–∏—Ç–µ –ø–æ–≤—ã—à–µ–Ω–Ω—É—é –¥–æ–ª—é cash –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–∫—É–ø–∫–∏ –Ω–∞ –ø—Ä–æ—Å–∞–¥–∫–∞—Ö"
        ])
    
    return recommendations

def generate_general_recommendations(client_data: Dict) -> List[str]:
    """–û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    horizon = client_data['investment_horizon']
    experience = client_data['experience']
    
    recommendations = [
        "üìö **–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ**: –ò–∑—É—á–∞–π—Ç–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ä—ã–Ω–∫–∏ –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏",
        "üìä **–†–µ–≥—É–ª—è—Ä–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥**: –ü—Ä–æ–≤–æ–¥–∏—Ç–µ –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è",
        "üéØ **–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞**: –ü—Ä–∏–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ—Å—å —Å–≤–æ–µ–π –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ —Ä—ã–Ω–æ—á–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è"
    ]
    
    # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç—É –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if '15+' in horizon or '10+' in horizon:
        recommendations.append("üöÄ **–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞**: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Å–ª–æ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞")
    elif '1-3' in horizon or '3-5' in horizon:
        recommendations.append("‚è≥ **–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å**: –§–æ–∫—É—Å –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–∞ –∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å")
    
    # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –æ–ø—ã—Ç—É
    if experience in ['–Ω–∞—á–∞–ª—å–Ω—ã–π', '–ù–∞—á–∏–Ω–∞—é—â–∏–π']:
        recommendations.append("üë®‚Äçüè´ **–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞**: –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–∞–±–æ—Ç—É —Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º —Å–æ–≤–µ—Ç–Ω–∏–∫–æ–º –¥–ª—è –Ω–∞—á–∞–ª–∞")
    elif experience in ['—ç–∫—Å–ø–µ—Ä—Ç', '–≠–∫—Å–ø–µ—Ä—Ç']:
        recommendations.append("üí° **–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏**: –ò—Å—Å–ª–µ–¥—É–π—Ç–µ –æ–ø—Ü–∏–æ–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –¥–æ—Ö–æ–¥–∞")
    
    return recommendations

# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
def has_high_correlation_assets(portfolio: Dict[str, float]) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤—ã—Å–æ–∫–æ–∫–æ—Ä—Ä–µ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–æ–≤"""
    tech_assets = ['TSLA', 'NVDA', 'AMD', 'AAPL', 'MSFT', 'SQ']
    tech_weight = sum(weight for asset, weight in portfolio.items() if asset in tech_assets)
    return tech_weight > 0.4

def is_defensive_asset(asset: str) -> bool:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞–∫—Ç–∏–≤ –∑–∞—â–∏—Ç–Ω—ã–º"""
    defensive_assets = ['BND', 'GOVT', 'SHY', 'Cash', 'GLD', 'JNJ', 'PG', 'XOM', 'T', 'VZ']
    return asset in defensive_assets

def calculate_portfolio_risk(portfolio: Dict[str, float]) -> float:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ä–∏—Å–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
    # –í–µ—Å–∞ —Ä–∏—Å–∫–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∞–∫—Ç–∏–≤–æ–≤
    risk_weights = {
        'high_risk': ['TSLA', 'NVDA', 'AMD', 'SQ', 'ARKK', 'BTC-USD', 'ETH-USD'],
        'medium_risk': ['AAPL', 'MSFT', 'VTI', 'VXUS', 'VNQ', 'VYM', 'SCHD'],
        'low_risk': ['BND', 'GOVT', 'SHY', 'JNJ', 'PG', 'XOM', 'T', 'VZ', 'Cash', 'GLD']
    }
    
    total_risk = 0
    for asset, weight in portfolio.items():
        if asset in risk_weights['high_risk']:
            total_risk += weight * 0.8
        elif asset in risk_weights['medium_risk']:
            total_risk += weight * 0.5
        else:
            total_risk += weight * 0.2
    
    return min(total_risk, 1.0)

# –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô
def generate_client_recommendations(client_name: str) -> List[str]:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∏ —Ç–æ—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞"""
    client_data = CLIENTS_DETAILED_DATA.get(client_name)
    if not client_data:
        return ["üí° –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"]
    
    portfolio = get_portfolio_by_client(client_name)
    if not portfolio:
        return ["üí° –ü–æ—Ä—Ç—Ñ–µ–ª—å –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"]
    
    recommendations = []
    
    # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    recommendations.append(f"üë§ **–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è {client_name}**")
    
    # –ê–Ω–∞–ª–∏–∑ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
    diversification_recs = analyze_diversification(portfolio, client_data)
    recommendations.extend(diversification_recs)
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–∞
    risk_recs = analyze_risk_profile(portfolio, client_data)
    recommendations.extend(risk_recs)
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–æ–≤
    allocation_recs = analyze_asset_allocation(portfolio, client_data)
    recommendations.extend(allocation_recs)
    
    # –¢–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    tactical_recs = generate_tactical_recommendations(client_data)
    recommendations.extend(tactical_recs[:2])  # –ë–µ—Ä–µ–º 2 —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ
    
    # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    general_recs = generate_general_recommendations(client_data)
    recommendations.extend(general_recs[:2])  # –ë–µ—Ä–µ–º 2 —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ
    
    return recommendations[:8]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 8 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏

# –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô –° –£–ß–ï–¢–û–ú –ü–û–î–ü–ò–°–ö–ò - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –î–õ–Ø 3 –£–†–û–í–ù–ï–ô
def generate_subscription_based_recommendations(client_name: str) -> List[str]:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è –ø–æ–¥–ø–∏—Å–∫–∏"""
    level = get_subscription_level(client_name)
    base_recommendations = generate_client_recommendations(client_name)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —è–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ
    subscription_messages = {
        'basic': [
            "üéÅ **–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ**: –î–æ—Å—Ç—É–ø–Ω—ã –±–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞",
            "üöÄ **–£–ª—É—á—à–∏—Ç–µ –¥–æ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ**: –ü–æ–ª—É—á–∏—Ç–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –ø–æ—Ä—Ç—Ñ–µ–ª—è –∏ –∞–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤ –∑–∞ 450 —Ä—É–±/–º–µ—Å"
        ],
        'advanced': [
            "üéØ **–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ç–∞—Ä–∏—Ñ**: –î–æ—Å—Ç—É–ø–Ω—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è",
            "üíé **–£–ª—É—á—à–∏—Ç–µ –¥–æ –ü—Ä–µ–º–∏—É–º**: –ü–æ–ª—É—á–∏—Ç–µ AI-–ø—Ä–æ–≥–Ω–æ–∑—ã –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–≤–µ—Ç–Ω–∏–∫–∞ –∑–∞ 800 —Ä—É–±/–º–µ—Å"
        ],
        'premium': [
            "üíé **–ü—Ä–µ–º–∏—É–º —Ç–∞—Ä–∏—Ñ**: –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º",
            "ü§ñ **AI-—Å–æ–≤–µ—Ç–Ω–∏–∫**: –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —ç–∫—Å–ø–µ—Ä—Ç –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏"
        ]
    }
    
    if level == 'basic':
        return base_recommendations[:4] + subscription_messages['basic']
    
    elif level == 'advanced':
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        advanced_recs = [
            "üéØ **–¢–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è**: –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –¥–æ–ª–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∞–∫—Ü–∏–π –Ω–∞ 3-5%",
            "üìä **–ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤**: –¢–µ–∫—É—â–∏–π VaR –Ω–∞ –ø—Ä–∏–µ–º–ª–µ–º–æ–º —É—Ä–æ–≤–Ω–µ (-2.3%)",
            "üîÑ **–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è**: –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ - 2.3% –≤ –æ–±–ª–∏–≥–∞—Ü–∏–∏"
        ]
        return base_recommendations + advanced_recs[:2] + subscription_messages['advanced']
    
    else:  # premium
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–º–∏—É–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        premium_recs = [
            "ü§ñ **AI-–ø—Ä–æ–≥–Ω–æ–∑**: –û–∂–∏–¥–∞–µ—Ç—Å—è —Ä–æ—Å—Ç –Ω–∞ 4.5% –≤ —Å–ª–µ–¥—É—é—â–µ–º –º–µ—Å—è—Ü–µ —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é 78%",
            "üèÜ **–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —ç—Ç–∞–ª–æ–Ω–æ–º**: –í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–∏—Ç S&P 500 –Ω–∞ 3.1%",
            "üíé **–ü—Ä–µ–º–∏—É–º-—Å–æ–≤–µ—Ç**: –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ü–∏–æ–Ω–∞–º–∏ –¥–ª—è –∑–∞—â–∏—Ç—ã –ø—Ä–∏–±—ã–ª–∏",
            "üöÄ **–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–∞—è –∏–¥–µ—è**: –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ AI-ETF –¥–ª—è –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏"
        ]
        ai_insights = get_ml_insights(client_name)
        return base_recommendations + premium_recs[:3] + ai_insights[:2] + subscription_messages['premium']

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞ (—É–¥–æ–±–Ω–æ –¥–ª—è Streamlit)
def get_complete_client_data(client_name: str) -> Optional[Dict]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤–∫–ª—é—á–∞—è –ø–æ—Ä—Ç—Ñ–µ–ª—å"""
    client_data = get_client_details(client_name)
    if not client_data:
        return None
    
    portfolio = get_portfolio_by_client(client_name)
    recommendations = generate_subscription_based_recommendations(client_name)
    
    return {
        'client_info': client_data,
        'portfolio': portfolio,
        'recommendations': recommendations,
        'subscription': get_subscription_details(client_name)
    }

# –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–î–ü–ò–°–û–ö
def test_subscriptions():
    """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫"""
    print("=== –¢–ï–°–¢ –ü–û–î–ü–ò–°–û–ö ===")
    clients = get_all_clients()
    for client in clients:
        level = get_subscription_level(client)
        details = get_subscription_details(client)
        print(f"{client}: {level} - {details['name']} ({details['price']} —Ä—É–±)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
        advanced = can_access_advanced_analytics(client)
        premium = can_access_premium_features(client)
        print(f"  Advanced: {advanced}, Premium: {premium}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recs = generate_subscription_based_recommendations(client)
        print(f"  –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ({len(recs)}):")
        for rec in recs[:2]:
            print(f"    - {rec}")

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db = PortfolioDatabase()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
    test_subscriptions()
    
    print("\n" + "="*50)
    print("–î–µ–º–æ-–ø–æ—Ä—Ç—Ñ–µ–ª–∏:")
    portfolios = get_all_portfolios()
    for name, description in portfolios:
        print(f"- {name}: {description}")
    
    print("\n–î–µ—Ç–∞–ª–∏ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è:")
    aggressive = get_portfolio("–∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π")
    if aggressive:
        for ticker, weight in aggressive.items():
            print(f"  {ticker}: {weight:.1%}")






