# app.py - –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è –°–û –í–°–ï–ú–ò –ü–û–ö–ê–ó–ê–¢–ï–õ–Ø–ú–ò –ò TOOLTIP'–ê–ú–ò

import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
import plotly.express as px
from datetime import datetime
import hashlib

# advanced_analysis.py - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä—è–º–æ –≤ app.py
import numpy as np
import pandas as pd
from typing import Dict, List, Optional, Tuple
import streamlit as st

class AdvancedPortfolioAnalysis:
    """–£—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è —Å–æ –≤—Å–µ–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏"""
    
    def __init__(self, portfolio_dict: Dict[str, float], client_name: str = "–î–µ–º–æ –ö–ª–∏–µ–Ω—Ç"):
        self.portfolio_dict = portfolio_dict
        self.client_name = client_name
        
    def comprehensive_analysis(self) -> Dict:
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –∏ –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        base_metrics = self.calculate_basic_metrics()
        risk_metrics = self.calculate_advanced_risk_metrics()
        
        return {
            'basic_metrics': base_metrics,
            'risk_metrics': risk_metrics,
            'portfolio_quality': self.analyze_portfolio_quality(),
            'efficiency_metrics': self.calculate_efficiency_metrics(),
            'comparative_analysis': self.benchmark_comparison(),
            'ai_insights': self.generate_ai_insights() if len(self.portfolio_dict) > 3 else [],
            'recommendations': self.generate_detailed_recommendations()
        }
    
    def calculate_basic_metrics(self) -> Dict:
        """–†–∞—Å—á–µ—Ç –±–∞–∑–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        return {
            'annual_return': 0.12,
            'annual_volatility': 0.18,
            'sharpe_ratio': 0.67,
            'max_drawdown': -0.15,
            'beta': 1.12,
            'current_value': 1500000,
            'total_return': 0.25,
            'client_name': self.client_name
        }
    
    def calculate_advanced_risk_metrics(self) -> Dict:
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤ –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        return {
            'parametric_var_95': -0.025,
            'parametric_var_99': -0.035,
            'cvar_95': -0.038,
            'cvar_99': -0.045,
            'downside_deviation': 0.08,
            'worst_day': -0.05,
            'worst_month': -0.12,
            'value_at_risk_1m': -45000,
            'expected_shortfall': -68000,
            'stress_test_2008': -0.35,
            'stress_test_covid': -0.28
        }
    
    def calculate_efficiency_metrics(self) -> Dict:
        """–ú–µ—Ç—Ä–∏–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –∏ –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        return {
            # –ë–∞–∑–æ–≤—ã–µ
            'sharpe_ratio': 0.67,
            'sortino_ratio': 0.89,
            'beta': 1.12,
            
            # –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ
            'treynor_ratio': 0.107,
            'm_squared': 0.045,
            'jensen_alpha': 0.023,
            
            # –ü—Ä–µ–º–∏—É–º
            'modigliani_ratio': 0.028,
            'information_ratio': 0.15,
            'tracking_error': 0.045,
            'downside_deviation': 0.08,
            'calmar_ratio': 0.80
        }
    
    def analyze_portfolio_quality(self) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
        return {
            'diversification_score': 0.72,
            'concentration_risk': '—É–º–µ—Ä–µ–Ω–Ω—ã–π',
            'correlation_matrix': self.generate_correlation_matrix(),
            'sector_diversification': self.analyze_sector_diversification(),
            'asset_allocation_score': 0.85,
            'liquidity_score': 0.90
        }
    
    def benchmark_comparison(self) -> Dict:
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —ç—Ç–∞–ª–æ–Ω–Ω—ã–º–∏ –∏–Ω–¥–µ–∫—Å–∞–º–∏"""
        return {
            'sp500_return': 0.121,
            'nasdaq_return': 0.183,
            'rts_return': 0.085,
            'outperformance_sp500': 0.029,
            'outperformance_nasdaq': -0.033,
            'volatility_comparison': '–≤—ã—à–µ —Ä—ã–Ω–∫–∞',
            'percentile_ranking': 0.68
        }
    
    def generate_correlation_matrix(self) -> pd.DataFrame:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∞—Ç—Ä–∏—Ü—ã –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π"""
        assets = list(self.portfolio_dict.keys())
        np.random.seed(42)
        corr_matrix = np.random.uniform(-0.3, 0.8, (len(assets), len(assets)))
        np.fill_diagonal(corr_matrix, 1.0)
        return pd.DataFrame(corr_matrix, index=assets, columns=assets)
    
    def analyze_sector_diversification(self) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –æ—Ç—Ä–∞—Å–ª–µ–≤–æ–π –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        sectors = {
            '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏': 0.35,
            '–§–∏–Ω–∞–Ω—Å—ã': 0.20,
            '–ó–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ': 0.15,
            '–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã': 0.12,
            '–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞': 0.08,
            '–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å': 0.06,
            '–ú–∞—Ç–µ—Ä–∏–∞–ª—ã': 0.04
        }
        return sectors
    
    def generate_ai_insights(self) -> List[str]:
        """AI –∏–Ω—Å–∞–π—Ç—ã –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        return [
            "ü§ñ **ML-–∞–Ω–∞–ª–∏–∑**: –ü–æ—Ä—Ç—Ñ–µ–ª—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ —Ä—ã–Ω–æ—á–Ω—ã–º —à–æ–∫–∞–º",
            "üìà **–ü–∞—Ç—Ç–µ—Ä–Ω—ã**: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å –≤ Q4",
            "‚ö° **–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å**: –û–∂–∏–¥–∞–µ—Ç—Å—è —Å–Ω–∏–∂–µ–Ω–∏–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ 15% –≤ —Å–ª–µ–¥—É—é—â–µ–º –∫–≤–∞—Ä—Ç–∞–ª–µ",
            "üéØ **–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è**: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –º–æ–∂–µ—Ç —É–≤–µ–ª–∏—á–∏—Ç—å –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –Ω–∞ 2.3%"
        ]
    
    def generate_detailed_recommendations(self) -> List[str]:
        """–î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        return [
            "üéØ **–¢–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è**: –£–≤–µ–ª–∏—á–∏—Ç—å –¥–æ–ª—é –∑–∞—â–∏—Ç–Ω—ã—Ö –∞–∫—Ç–∏–≤–æ–≤ –Ω–∞ 5%",
            "üìä **–†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç**: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–æ–ø-–ª–æ—Å—Å –Ω–∞ —É—Ä–æ–≤–Ω–µ -8% –¥–ª—è –≤—ã—Å–æ–∫–æ–≤–æ–ª–∞—Ç–∏–ª—å–Ω—ã—Ö –∞–∫—Ç–∏–≤–æ–≤",
            "üîÑ **–†–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞**: –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –µ–∂–µ–∫–≤–∞—Ä—Ç–∞–ª—å–Ω–∞—è —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞",
            "üåç **–î–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è**: –î–æ–±–∞–≤–∏—Ç—å exposure –∫ —Ä–∞–∑–≤–∏–≤–∞—é—â–∏–º—Å—è —Ä—ã–Ω–∫–∞–º"
        ]

# TOOLTIP'–´ –î–õ–Ø –ü–û–ö–ê–ó–ê–¢–ï–õ–ï–ô
TOOLTIPS = {
    # –ë–ê–ó–û–í–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò
    'sharpe_ratio': "üìä **–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞**\n\n–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à–æ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∫–æ–º–ø–µ–Ω—Å–∏—Ä—É–µ—Ç —Ä–∏—Å–∫. –ß–µ–º –≤—ã—à–µ - —Ç–µ–º –ª—É—á—à–µ –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É —Ä–∏—Å–∫–æ–º –∏ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å—é.\n\n‚Ä¢ <1.0 - –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å\n‚Ä¢ 1.0-2.0 - —Ö–æ—Ä–æ—à–æ\n‚Ä¢ >2.0 - –æ—Ç–ª–∏—á–Ω–æ",
    
    'beta': "üìà **–ë–µ—Ç–∞-–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç**\n\n–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è –∫ —Ä—ã–Ω–∫—É:\n\n‚Ä¢ <0 - –¥–≤–∏–∂–µ—Ç—Å—è –ø—Ä–æ—Ç–∏–≤ —Ä—ã–Ω–∫–∞\n‚Ä¢ 0-1 - –º–µ–Ω–µ–µ –≤–æ–ª–∞—Ç–∏–ª–µ–Ω —á–µ–º —Ä—ã–Ω–æ–∫\n‚Ä¢ 1 - –∫–∞–∫ —Ä—ã–Ω–æ–∫\n‚Ä¢ >1 - –±–æ–ª–µ–µ –≤–æ–ª–∞—Ç–∏–ª–µ–Ω —á–µ–º —Ä—ã–Ω–æ–∫",
    
    'max_drawdown': "üìâ **–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞**\n\n–°–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –ø–∞–¥–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è –æ—Ç –ø–∏–∫–∞ –¥–æ –º–∏–Ω–∏–º—É–º–∞. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—à —Ö—É–¥—à–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π.",
    
    'annual_return': "üí∞ **–ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å**\n\n–°—Ä–µ–¥–Ω—è—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –≤ –≥–æ–¥–æ–≤–æ–º –≤—ã—Ä–∞–∂–µ–Ω–∏–∏. –£—á–∏—Ç—ã–≤–∞–µ—Ç —Å–ª–æ–∂–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç.",
    
    'annual_volatility': "‚ö° **–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å**\n\n–ú–µ—Ä–∞ —Ä–∏—Å–∫–∞ - –Ω–∞—Å–∫–æ–ª—å–∫–æ —Å–∏–ª—å–Ω–æ '–∫–æ–ª–µ–±–ª–µ—Ç—Å—è' —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è. –ß–µ–º –≤—ã—à–µ - —Ç–µ–º –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–µ–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.",
    
    # –ü–†–û–î–í–ò–ù–£–¢–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò
    'sortino_ratio': "üéØ **–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –°–æ—Ä—Ç–∏–Ω–æ**\n\n–ö–∞–∫ –®–∞—Ä–ø, –Ω–æ —É—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ '–ø–ª–æ—Ö—É—é' –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (—É–±—ã—Ç–∫–∏). –ë–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–∞.",
    
    'treynor_ratio': "üèÜ **–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¢—Ä–µ–π–Ω–æ—Ä–∞**\n\n–ù–∞—Å–∫–æ–ª—å–∫–æ –≤—ã –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–∏—Ç–µ –±–µ–∑—Ä–∏—Å–∫–æ–≤—ã–µ –≤–ª–æ–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≥–æ—Å–æ–±–ª–∏–≥–∞—Ü–∏–∏). –ß–µ–º –≤—ã—à–µ - —Ç–µ–º –ª—É—á—à–µ.",
    
    'm_squared': "üìä **–ú-–∫–≤–∞–¥—Ä–∞—Ç**\n\n–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å –ø–æ–ø—Ä–∞–≤–∫–æ–π –Ω–∞ —Ä–∏—Å–∫. –ü–æ–º–æ–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è–º–∏.",
    
    'jensen_alpha': "Œ± **–ê–ª—å—Ñ–∞ –î–∂–µ–Ω—Å–µ–Ω–∞**\n\n–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –Ω–∞—Å–∫–æ–ª—å–∫–æ –≤–∞—à–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –ª—É—á—à–µ –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –∞–ª—å—Ñ–∞ - –≤—ã –º–æ–ª–æ–¥–µ—Ü!",
    
    'parametric_var_95': "üõ°Ô∏è **Value at Risk (95%)**\n\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –ø–æ—Ç–µ—Ä–∏ —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 95%. '–í —Ö—É–¥—à–µ–º —Å–ª—É—á–∞–µ –≤—ã –ø–æ—Ç–µ—Ä—è–µ—Ç–µ –Ω–µ –±–æ–ª–µ–µ X%'",
    
    'cvar_95': "‚ö° **Conditional VaR**\n\n–°—Ä–µ–¥–Ω–∏–µ –ø–æ—Ç–µ—Ä–∏ –≤ —Ç–µ—Ö 5% —Ö—É–¥—à–∏—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤. '–ï—Å–ª–∏ —É–∂–µ —Å–ª—É—á–∏–ª–æ—Å—å –ø–ª–æ—Ö–æ–µ, —Ç–æ –≤ —Å—Ä–µ–¥–Ω–µ–º –ø–æ—Ç–µ—Ä—è–µ—Ç–µ X%'",
    
    # –ü–†–ï–ú–ò–£–ú –ü–û–ö–ê–ó–ê–¢–ï–õ–ò
    'modigliani_ratio': "üíé **–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ú–æ–¥–∏–ª—å—è–Ω–∏**\n\n–ù–∞—Å–∫–æ–ª—å–∫–æ –≤–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ —Ä—ã–Ω–∫–∞ –ø—Ä–∏ —Ç–æ–º –∂–µ —É—Ä–æ–≤–Ω–µ —Ä–∏—Å–∫–∞. –ó–æ–ª–æ—Ç–æ–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç –æ—Ü–µ–Ω–∫–∏.",
    
    'information_ratio': "üéØ **Information Ratio**\n\n–ö–∞—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –ø—Ä–µ–≤–æ—Å—Ö–æ–¥—Å—Ç–≤–∞ –Ω–∞–¥ —Ä—ã–Ω–∫–æ–º.",
    
    'tracking_error': "üìè **Tracking Error**\n\n–ù–∞—Å–∫–æ–ª—å–∫–æ –≤–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å –æ—Ç–∫–ª–æ–Ω—è–µ—Ç—Å—è –æ—Ç —ç—Ç–∞–ª–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, S&P500). –ú–µ—Ä–∞ '–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏' —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.",
    
    'calmar_ratio': "‚öñÔ∏è **–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ö–∞–ª–º–∞—Ä–∞**\n\n–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ—Å–∞–¥–∫–∏. –û—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–µ–Ω –¥–ª—è –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤."
}

def create_tooltip(metric_name: str) -> str:
    """–°–æ–∑–¥–∞–µ—Ç HTML –¥–ª—è tooltip'–∞"""
    tooltip_text = TOOLTIPS.get(metric_name, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ")
    return f'''
    <div class="tooltip">
        <span class="tooltip-icon">‚ùì</span>
        <span class="tooltip-text">{tooltip_text}</span>
    </div>
    '''

def display_metric_with_tooltip(label: str, value: str, metric_name: str, help_text: str = None):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ—Ç—Ä–∏–∫—É —Å tooltip'–æ–º"""
    col1, col2 = st.columns([4, 1])
    
    with col1:
        st.metric(label, value)
    
    with col2:
        if help_text:
            st.markdown(f"""
            <div style="margin-top: 1.5rem;">
                {create_tooltip(metric_name)}
            </div>
            """, unsafe_allow_html=True)
        else:
            st.markdown(f"""
            <div style="margin-top: 1.5rem;">
                {create_tooltip(metric_name)}
            </div>
            """, unsafe_allow_html=True)

def display_portfolio_analysis(results: Dict, subscription_level: str) -> None:
    """–£–ª—É—á—à–µ–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ —É—Ä–æ–≤–Ω—è–º–∏ –¥–æ—Å—Ç—É–ø–∞"""
    if not results:
        st.error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return
    
    metrics = results.get('basic_metrics', {})
    
    if not metrics:
        st.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏")
        return
    
    # –û–°–ù–û–í–ù–´–ï –ú–ï–¢–†–ò–ö–ò (–¥–ª—è –≤—Å–µ—Ö)
    st.subheader("üìä –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        display_metric_with_tooltip(
            "–ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å", 
            f"{metrics.get('annual_return', 0):.1%}", 
            'annual_return'
        )
    
    with col2:
        display_metric_with_tooltip(
            "–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å", 
            f"{metrics.get('annual_volatility', 0):.1%}", 
            'annual_volatility'
        )
    
    with col3:
        display_metric_with_tooltip(
            "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞", 
            f"{metrics.get('sharpe_ratio', 0):.2f}", 
            'sharpe_ratio'
        )
    
    with col4:
        display_metric_with_tooltip(
            "–ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞", 
            f"{metrics.get('max_drawdown', 0):.1%}", 
            'max_drawdown'
        )
    
    # –ë–ï–¢–ê (–¥–ª—è –≤—Å–µ—Ö)
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        display_metric_with_tooltip(
            "–ë–µ—Ç–∞-–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç", 
            f"{metrics.get('beta', 0):.2f}", 
            'beta'
        )
    
    # –ü–†–û–î–í–ò–ù–£–¢–´–ï –ú–ï–¢–†–ò–ö–ò –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–ò
    efficiency_metrics = results.get('efficiency_metrics', {})
    if efficiency_metrics and subscription_level in ['advanced', 'premium']:
        st.subheader("üéØ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            display_metric_with_tooltip(
                "–ö–æ—ç—Ñ. –°–æ—Ä—Ç–∏–Ω–æ", 
                f"{efficiency_metrics.get('sortino_ratio', 0):.2f}", 
                'sortino_ratio'
            )
        
        with col2:
            display_metric_with_tooltip(
                "–ö–æ—ç—Ñ. –¢—Ä–µ–π–Ω–æ—Ä–∞", 
                f"{efficiency_metrics.get('treynor_ratio', 0):.3f}", 
                'treynor_ratio'
            )
        
        with col3:
            display_metric_with_tooltip(
                "–ú-–∫–≤–∞–¥—Ä–∞—Ç", 
                f"{efficiency_metrics.get('m_squared', 0):.3f}", 
                'm_squared'
            )
        
        with col4:
            display_metric_with_tooltip(
                "–ê–ª—å—Ñ–∞ –î–∂–µ–Ω—Å–µ–Ω–∞", 
                f"{efficiency_metrics.get('jensen_alpha', 0):.3f}", 
                'jensen_alpha'
            )

def display_advanced_risk_analysis(results: Dict, subscription_level: str) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ä–∏—Å–∫–æ–≤"""
    risk_metrics = results.get('risk_metrics', {})
    if not risk_metrics or subscription_level not in ['advanced', 'premium']:
        return
    
    st.subheader("üéØ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤")
    
    # Value at Risk –º–µ—Ç—Ä–∏–∫–∏
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        display_metric_with_tooltip(
            "VaR (95%)", 
            f"{risk_metrics.get('parametric_var_95', 0):.2%}", 
            'parametric_var_95'
        )
    
    with col2:
        display_metric_with_tooltip(
            "CVaR (95%)", 
            f"{risk_metrics.get('cvar_95', 0):.2%}", 
            'cvar_95'
        )
    
    with col3:
        st.metric("VaR (99%)", f"{risk_metrics.get('parametric_var_99', 0):.2%}")
    
    with col4:
        st.metric("CVaR (99%)", f"{risk_metrics.get('cvar_99', 0):.2%}")

def display_premium_efficiency_metrics(results: Dict, subscription_level: str) -> None:
    """–ü—Ä–µ–º–∏—É–º –º–µ—Ç—Ä–∏–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    efficiency_metrics = results.get('efficiency_metrics', {})
    if not efficiency_metrics or subscription_level != 'premium':
        return
    
    st.subheader("üíé –ü—Ä–µ–º–∏—É–º –º–µ—Ç—Ä–∏–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        display_metric_with_tooltip(
            "–ö–æ—ç—Ñ. –ú–æ–¥–∏–ª—å—è–Ω–∏", 
            f"{efficiency_metrics.get('modigliani_ratio', 0):.3f}", 
            'modigliani_ratio'
        )
    
    with col2:
        display_metric_with_tooltip(
            "Information Ratio", 
            f"{efficiency_metrics.get('information_ratio', 0):.3f}", 
            'information_ratio'
        )
    
    with col3:
        display_metric_with_tooltip(
            "Tracking Error", 
            f"{efficiency_metrics.get('tracking_error', 0):.3f}", 
            'tracking_error'
        )
    
    with col4:
        display_metric_with_tooltip(
            "–ö–æ—ç—Ñ. –ö–∞–ª–º–∞—Ä–∞", 
            f"{efficiency_metrics.get('calmar_ratio', 0):.2f}", 
            'calmar_ratio'
        )

def display_portfolio_quality(results: Dict, subscription_level: str) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
    portfolio_quality = results.get('portfolio_quality', {})
    if not portfolio_quality or subscription_level not in ['advanced', 'premium']:
        return
    
    st.subheader("üèÜ –ö–∞—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("–û—Ü–µ–Ω–∫–∞ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏", f"{portfolio_quality.get('diversification_score', 0):.0%}")
    
    with col2:
        st.metric("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–æ–≤", f"{portfolio_quality.get('asset_allocation_score', 0):.0%}")
    
    with col3:
        st.metric("–õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å", f"{portfolio_quality.get('liquidity_score', 0):.0%}")
    
    # –ú–∞—Ç—Ä–∏—Ü–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
    correlation_matrix = portfolio_quality.get('correlation_matrix')
    if correlation_matrix is not None:
        st.subheader("üìä –ú–∞—Ç—Ä–∏—Ü–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π")
        fig = px.imshow(correlation_matrix, 
                       text_auto=True, 
                       aspect="auto",
                       color_continuous_scale='RdBu_r',
                       title="–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–µ–∂–¥—É –∞–∫—Ç–∏–≤–∞–º–∏")
        st.plotly_chart(fig, use_container_width=True)

def display_premium_analytics(results: Dict, subscription_level: str) -> None:
    """–ü—Ä–µ–º–∏—É–º –∞–Ω–∞–ª–∏—Ç–∏–∫–∞"""
    if subscription_level != 'premium':
        return
    
    st.subheader("üíé –ü—Ä–µ–º–∏—É–º –∞–Ω–∞–ª–∏—Ç–∏–∫–∞")
    
    # AI –∏–Ω—Å–∞–π—Ç—ã
    ai_insights = results.get('ai_insights', [])
    if ai_insights:
        st.success("### ü§ñ AI –ò–Ω—Å–∞–π—Ç—ã")
        for insight in ai_insights:
            st.write(insight)
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –±–µ–Ω—á–º–∞—Ä–∫–∞–º–∏
    comparative = results.get('comparative_analysis', {})
    if comparative:
        st.success("### üèÜ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —ç—Ç–∞–ª–æ–Ω–∞–º–∏")
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric("vs S&P 500", f"{comparative.get('outperformance_sp500', 0):.2%}")
        
        with col2:
            st.metric("vs Nasdaq", f"{comparative.get('outperformance_nasdaq', 0):.2%}")
        
        with col3:
            st.metric("Percentile", f"{comparative.get('percentile_ranking', 0):.0%}")
    
    # –û—Ç—Ä–∞—Å–ª–µ–≤–∞—è –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
    sectors = results.get('portfolio_quality', {}).get('sector_diversification', {})
    if sectors:
        st.success("### üåç –û—Ç—Ä–∞—Å–ª–µ–≤–∞—è –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è")
        sector_df = pd.DataFrame(list(sectors.items()), columns=['–°–µ–∫—Ç–æ—Ä', '–î–æ–ª—è'])
        fig = px.pie(sector_df, values='–î–æ–ª—è', names='–°–µ–∫—Ç–æ—Ä', hole=0.4)
        st.plotly_chart(fig, use_container_width=True)

# –ò–ú–ü–û–†–¢–ò–†–£–ï–ú –§–£–ù–ö–¶–ò–ò –ò–ó database.py
from database import (
    get_all_clients, 
    get_client_details, 
    get_portfolio_by_client, 
    generate_subscription_based_recommendations,
    get_subscription_level,
    get_subscription_details,
    can_access_advanced_analytics,
    can_access_premium_features,
    SUBSCRIPTION_FEATURES
)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É Streamlit
st.set_page_config(
    page_title="–Æ–Ω–∏–í–µ—Å—Ç - AI –°–æ–≤–µ—Ç–Ω–∏–∫ –ø–æ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS –î–õ–Ø TOOLTIP'–û–í
st.markdown("""
<style>
.tooltip {
    position: relative;
    display: inline-block;
    cursor: pointer;
}

.tooltip .tooltip-icon {
    color: #666;
    font-size: 0.9em;
    padding: 2px 6px;
    border-radius: 50%;
    background: #f0f0f0;
}

.tooltip .tooltip-text {
    visibility: hidden;
    width: 300px;
    background-color: #333;
    color: white;
    text-align: left;
    border-radius: 6px;
    padding: 12px;
    position: absolute;
    z-index: 1;
    bottom: 125%;
    left: 50%;
    margin-left: -150px;
    opacity: 0;
    transition: opacity 0.3s;
    font-size: 0.9em;
    line-height: 1.4;
    box-shadow: 0 4px 12px rgba(0,0,0,0.2);
}

.tooltip:hover .tooltip-text {
    visibility: visible;
    opacity: 1;
}

.tooltip .tooltip-text::after {
    content: "";
    position: absolute;
    top: 100%;
    left: 50%;
    margin-left: -5px;
    border-width: 5px;
    border-style: solid;
    border-color: #333 transparent transparent transparent;
}

.metric-container {
    display: flex;
    align-items: center;
    gap: 8px;
}
</style>
""", unsafe_allow_html=True)

def hash_password(password):
    """–•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è"""
    return hashlib.sha256(password.encode()).hexdigest()

def init_session_state():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏"""
    if 'authenticated' not in st.session_state:
        st.session_state.authenticated = False
    if 'current_user' not in st.session_state:
        st.session_state.current_user = None
    if 'current_page' not in st.session_state:
        st.session_state.current_page = "üìä –î–∞—à–±–æ—Ä–¥"

def display_subscription_badge(subscription_level: str) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π –±–µ–π–¥–∂ –ø–æ–¥–ø–∏—Å–∫–∏"""
    badges = {
        'basic': 'üìä <span style="background: linear-gradient(135deg, #11998e, #38ef7d); color: white; padding: 4px 12px; border-radius: 20px; font-size: 0.8em; font-weight: bold;">–ë–ê–ó–û–í–´–ô</span>',
        'advanced': 'üéØ <span style="background: linear-gradient(135deg, #fc466b, #3f5efb); color: white; padding: 4px 12px; border-radius: 20px; font-size: 0.8em; font-weight: bold;">–ü–†–û–î–í–ò–ù–£–¢–´–ô</span>',
        'premium': 'üíé <span style="background: linear-gradient(135deg, #ffd700, #ff8c00); color: black; padding: 4px 12px; border-radius: 20px; font-size: 0.8em; font-weight: bold;">–ü–†–ï–ú–ò–£–ú</span>'
    }
    return badges.get(subscription_level, badges['basic'])

def login_page():
    """–ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞ –ë–ï–ó –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –ü–û–î–ü–ò–°–ö–ê–•"""
    st.markdown("""
    <style>
        .login-container {
            max-width: 90%;
            width: 400px;
            margin: 10vh auto;
            padding: 2rem;
            background: white;
            border-radius: 20px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            text-align: center;
        }
        .main-title {
            font-size: clamp(2rem, 5vw, 2.8rem);
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            margin-bottom: 0.5rem;
            font-weight: bold;
        }
        .subtitle {
            color: #666;
            margin-bottom: 2rem;
            font-size: clamp(1rem, 3vw, 1.2rem);
        }
    </style>
    """, unsafe_allow_html=True)
    
    st.markdown("""
    <div style='display: flex; justify-content: center; align-items: center; min-height: 80vh; padding: 1rem;'>
        <div class="login-container">
            <h1 class="main-title">ü§ñ –Æ–Ω–∏–í–µ—Å—Ç</h1>
            <div class="subtitle">AI –°–æ–≤–µ—Ç–Ω–∏–∫ –ø–æ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º</div>
    """, unsafe_allow_html=True)
    
    clients = get_all_clients()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –ë–ï–ó –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞—Ä–∏—Ñ–∞—Ö
    selected_client = st.selectbox(
        "üë§ –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞:",
        clients,
        index=0
    )
    
    password = st.text_input("üîí –ü–∞—Ä–æ–ª—å:", type="password", value="demo123")
    
    if st.button("üöÄ –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É", use_container_width=True, type="primary"):
        if password == "demo123":
            st.session_state.authenticated = True
            st.session_state.current_user = selected_client
            st.rerun()
        else:
            st.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'demo123'")
    
    st.markdown("""
            <div style="margin-top: 2rem; padding: 1rem; background: #f8f9fa; border-radius: 10px;">
                <p style="margin: 0; font-size: 0.9rem;"><strong>üí° –î–µ–º–æ-–¥–æ—Å—Ç—É–ø:</strong> –ü–∞—Ä–æ–ª—å: <code>demo123</code></p>
                <p style="margin: 0.5rem 0 0 0; font-size: 0.8rem; color: #666;">–ö–∞–∂–¥—ã–π –∫–ª–∏–µ–Ω—Ç –∏–º–µ–µ—Ç —Ä–∞–∑–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏</p>
            </div>
        </div>
    </div>
    """, unsafe_allow_html=True)

def create_portfolio_metrics(client_data, portfolio_dict, subscription_level: str):
    """–°–æ–∑–¥–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –ø–æ—Ä—Ç—Ñ–µ–ª—è —Å —É—á–µ—Ç–æ–º —É—Ä–æ–≤–Ω—è –ø–æ–¥–ø–∏—Å–∫–∏"""
    portfolio_type = client_data['portfolio_type']
    
    # –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö
    base_metrics = {
        '–∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π': {
            'expected_return': 0.18, 'volatility': 0.32, 'sharpe_ratio': 0.56, 
            'max_drawdown': -0.40, 'beta': 1.25
        },
        '—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π': {
            'expected_return': 0.095, 'volatility': 0.14, 'sharpe_ratio': 0.68, 
            'max_drawdown': -0.20, 'beta': 0.95
        },
        '–¥–æ—Ö–æ–¥–Ω—ã–π': {
            'expected_return': 0.078, 'volatility': 0.11, 'sharpe_ratio': 0.71, 
            'max_drawdown': -0.15, 'beta': 0.75
        },
        '—É–ª—å—Ç—Ä–∞-–∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π': {
            'expected_return': 0.045, 'volatility': 0.05, 'sharpe_ratio': 0.90, 
            'max_drawdown': -0.08, 'beta': 0.35
        }
    }
    
    metrics = base_metrics.get(portfolio_type, base_metrics['—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π'])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è advanced –∏ premium
    if subscription_level in ['advanced', 'premium']:
        advanced_metrics = {
            '–∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π': {
                'sortino_ratio': 0.72, 'treynor_ratio': 0.144, 'm_squared': 0.038,
                'jensen_alpha': 0.028, 'calmar_ratio': 0.45
            },
            '—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π': {
                'sortino_ratio': 0.85, 'treynor_ratio': 0.100, 'm_squared': 0.025,
                'jensen_alpha': 0.015, 'calmar_ratio': 0.48
            },
            '–¥–æ—Ö–æ–¥–Ω—ã–π': {
                'sortino_ratio': 0.88, 'treynor_ratio': 0.104, 'm_squared': 0.022,
                'jensen_alpha': 0.012, 'calmar_ratio': 0.52
            },
            '—É–ª—å—Ç—Ä–∞-–∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π': {
                'sortino_ratio': 1.05, 'treynor_ratio': 0.129, 'm_squared': 0.018,
                'jensen_alpha': 0.008, 'calmar_ratio': 0.56
            }
        }
        metrics.update(advanced_metrics.get(portfolio_type, {}))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–º–∏—É–º –º–µ—Ç—Ä–∏–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è premium
    if subscription_level == 'premium':
        premium_metrics = {
            '–∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π': {
                'modigliani_ratio': 0.035, 'information_ratio': 0.18, 'tracking_error': 0.068
            },
            '—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π': {
                'modigliani_ratio': 0.022, 'information_ratio': 0.12, 'tracking_error': 0.045
            },
            '–¥–æ—Ö–æ–¥–Ω—ã–π': {
                'modigliani_ratio': 0.018, 'information_ratio': 0.10, 'tracking_error': 0.038
            },
            '—É–ª—å—Ç—Ä–∞-–∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π': {
                'modigliani_ratio': 0.012, 'information_ratio': 0.08, 'tracking_error': 0.025
            }
        }
        metrics.update(premium_metrics.get(portfolio_type, {}))
    
    return metrics

def create_growth_chart(client_data, portfolio_type, current_client):
    """–°–æ–∑–¥–∞–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —Ä–æ—Å—Ç–∞"""
    dates = pd.date_range(start='2021-01-01', end='2024-01-01', freq='M')
    
    returns_map = {
        '–∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π': {'mean': 0.015, 'std': 0.08},
        '—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π': {'mean': 0.008, 'std': 0.04},
        '–¥–æ—Ö–æ–¥–Ω—ã–π': {'mean': 0.006, 'std': 0.03},
        '—É–ª—å—Ç—Ä–∞-–∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π': {'mean': 0.004, 'std': 0.02}
    }
    
    return_profile = returns_map.get(portfolio_type, returns_map['—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π'])
    seed = sum(ord(c) for c in current_client)
    np.random.seed(seed)
    
    monthly_returns = np.random.normal(return_profile['mean'], return_profile['std'], len(dates))
    initial = client_data['initial_investment']
    values = [initial]
    
    for ret in monthly_returns:
        values.append(values[-1] * (1 + ret))
    
    return dates, values[1:], initial

def display_subscription_status(client_name: str):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞"""
    subscription_level = get_subscription_level(client_name)
    subscription_details = get_subscription_details(client_name)
    
    st.sidebar.markdown("---")
    st.sidebar.subheader("üíé –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞")
    
    # –ë–µ–π–¥–∂ –ø–æ–¥–ø–∏—Å–∫–∏
    badge_html = display_subscription_badge(subscription_level)
    st.sidebar.markdown(f"<div style='text-align: center; margin-bottom: 1rem;'>{badge_html}</div>", unsafe_allow_html=True)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —Ç–∞—Ä–∏—Ñ–µ
    st.sidebar.write(f"**–¢–∞—Ä–∏—Ñ:** {subscription_details['name']}")
    st.sidebar.write(f"**–°—Ç–æ–∏–º–æ—Å—Ç—å:** {subscription_details['price']} —Ä—É–±/–º–µ—Å")
    st.sidebar.write(f"**–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:** {subscription_details['expires']}")
    
    # –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    st.sidebar.markdown("**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**")
    features = SUBSCRIPTION_FEATURES[subscription_level]['features']
    for feature in features[:3]:
        st.sidebar.write(f"‚Ä¢ {feature}")
    
    # –ö–Ω–æ–ø–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω–µ –ø—Ä–µ–º–∏—É–º
    if subscription_level != 'premium':
        st.sidebar.markdown("---")
        levels = ['basic', 'advanced', 'premium']
        current_index = levels.index(subscription_level) if subscription_level in levels else 0
        next_level = levels[current_index + 1] if current_index < len(levels) - 1 else 'premium'
        next_sub_info = SUBSCRIPTION_FEATURES.get(next_level, {})
        
        if st.sidebar.button(f"üöÄ –£–ª—É—á—à–∏—Ç—å –¥–æ {next_sub_info.get('name', '–ü—Ä–µ–º–∏—É–º')}", use_container_width=True):
            st.session_state.current_page = "üíé –¢–∞—Ä–∏—Ñ—ã"
            st.rerun()

def show_feature_unlock_prompt(feature_name: str, required_level: str, client_name: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–º—Ç –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ñ—É–Ω–∫—Ü–∏–∏"""
    current_level = get_subscription_level(client_name)
    required_plan = SUBSCRIPTION_FEATURES[required_level]
    
    st.warning(f"üîí **{feature_name} –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ —Ç–∞—Ä–∏—Ñ–µ {required_plan['name']}**")
    
    col1, col2 = st.columns([3, 1])
    
    with col1:
        st.write(f"**–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:**")
        for feature in required_plan['features'][:3]:
            st.write(f"‚Ä¢ {feature}")
    
    with col2:
        if st.button(f"üí≥ {required_plan['price']}‚ÇΩ/–º–µ—Å", key=f"unlock_{feature_name}"):
            st.session_state.current_page = "üíé –¢–∞—Ä–∏—Ñ—ã"
            st.rerun()

def display_pricing_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º —Ç–∞—Ä–∏—Ñ–æ–≤"""
    st.title("üíé –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π —Ç–∞—Ä–∏—Ñ")
    st.write("–ù–∞—á–Ω–∏—Ç–µ —Å –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –±–∞–∑–æ–≤–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ –∏ —É–ª—É—á—à–∞–π—Ç–µ –ø–æ –º–µ—Ä–µ —Ä–æ—Å—Ç–∞ –≤–∞—à–∏—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Ç–∞—Ä–∏—Ñ–æ–≤
    col1, col2, col3 = st.columns(3)
    
    for i, level in enumerate(['basic', 'advanced', 'premium']):
        plan = SUBSCRIPTION_FEATURES[level]
        with [col1, col2, col3][i]:
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –±–µ–π–¥–∂–µ–º
            badge_html = display_subscription_badge(level)
            st.markdown(f"<div style='text-align: center; margin-bottom: 1rem;'>{badge_html}</div>", unsafe_allow_html=True)
            
            st.subheader(plan['name'])
            st.metric("–°—Ç–æ–∏–º–æ—Å—Ç—å", f"{plan['price']}‚ÇΩ/–º–µ—Å")
            
            st.write("**–í–∫–ª—é—á–µ–Ω–æ:**")
            for feature in plan['features'][:6]:
                st.write(f"‚úÖ {feature}")
            
            if level == 'basic':
                st.button("üéÅ –ù–∞—á–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ", key=f"btn_{level}", use_container_width=True, type="primary")
            else:
                st.button(f"üí≥ –í—ã–±—Ä–∞—Ç—å {plan['name']}", key=f"btn_{level}", use_container_width=True)

def advanced_analytics_page():
    """–£–õ–£–ß–®–ï–ù–ù–ê–Ø —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    current_client = st.session_state.current_user
    subscription_level = get_subscription_level(current_client)
    
    st.title("üìà –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
    if not can_access_advanced_analytics(current_client):
        show_feature_unlock_prompt("–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", "advanced", current_client)
        return
    
    st.success(f"üéØ –£ –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–µ!")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
    client_data = get_client_details(current_client)
    portfolio_dict = get_portfolio_by_client(current_client)
    
    if not portfolio_dict:
        st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—å")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –†–ê–°–®–ò–†–ï–ù–ù–´–ô –∞–Ω–∞–ª–∏–∑
    with st.spinner("üîç –ü—Ä–æ–≤–æ–¥–∏–º —É–≥–ª—É–±–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è..."):
        analyzer = AdvancedPortfolioAnalysis(portfolio_dict, current_client)
        results = analyzer.comprehensive_analysis()
    
    if results:
        # –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        display_portfolio_analysis(results, subscription_level)
        
        # –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        display_advanced_risk_analysis(results, subscription_level)
        
        # –ü—Ä–µ–º–∏—É–º –º–µ—Ç—Ä–∏–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        display_premium_efficiency_metrics(results, subscription_level)
        
        # –ö–∞—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        display_portfolio_quality(results, subscription_level)
        
        # –ü—Ä–µ–º–∏—É–º –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
        display_premium_analytics(results, subscription_level)
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        st.subheader("üìã –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
        for recommendation in results.get('recommendations', []):
            st.info(recommendation)

def dashboard_page():
    """–ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –° –û–ë–ù–û–í–õ–ï–ù–ù–´–ú–ò –¢–ê–†–ò–§–ê–ú–ò"""
    
    current_client = st.session_state.current_user
    client_data = get_client_details(current_client)
    portfolio_dict = get_portfolio_by_client(current_client)
    subscription_level = get_subscription_level(current_client)
    
    if not client_data or not portfolio_dict:
        st.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞
    has_advanced_access = can_access_advanced_analytics(current_client)
    has_premium_access = can_access_premium_features(current_client)
    subscription_details = get_subscription_details(current_client)
    
    # –ë–µ–π–¥–∂ –ø–æ–¥–ø–∏—Å–∫–∏
    badge_html = display_subscription_badge(subscription_level)
    
    # –ó–ê–ì–û–õ–û–í–û–ö –° –ë–ï–ô–î–ñ–ï–ú –ü–û–î–ü–ò–°–ö–ò
    st.markdown(f'''
    <div style="text-align: center; padding: 2rem; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border-radius: 15px; margin-bottom: 2rem;">
        <h1 style="color: white; margin-bottom: 0.5rem;">ü§ñ –Æ–Ω–∏–í–µ—Å—Ç AI –°–æ–≤–µ—Ç–Ω–∏–∫</h1>
        <h2 style="color: white; margin: 0;">{current_client}</h2>
        <div style="margin-top: 0.5rem;">
            {badge_html}
        </div>
    </div>
    ''', unsafe_allow_html=True)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ä–∞—Å–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    col1, col2, col3 = st.columns([2, 1, 1])
    
    with col1:
        st.markdown(f'<div style="font-size: 1.2rem;">üë§ <strong>{current_client}</strong></div>', unsafe_allow_html=True)
    
    with col2:
        st.metric("–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", f"{client_data['initial_investment']:,.0f} ‚ÇΩ")
    
    with col3:
        if st.button("üö™ –í—ã–π—Ç–∏", use_container_width=True, type="secondary"):
            st.session_state.authenticated = False
            st.session_state.current_user = None
            st.rerun()
    
    st.markdown("---")
    
    # SIDEBAR
    with st.sidebar:
        st.title("üéØ –ù–∞–≤–∏–≥–∞—Ü–∏—è")
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
        page = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", 
                       ["üìä –î–∞—à–±–æ—Ä–¥", "üìà –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", "üíé –¢–∞—Ä–∏—Ñ—ã"],
                       index=0)
        
        if page != st.session_state.current_page:
            st.session_state.current_page = page
            st.rerun()
        
        # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        st.markdown("---")
        clients = get_all_clients()
        new_user = st.selectbox("üë• –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞:", clients, 
                              index=clients.index(current_client))
        
        if new_user != current_client:
            st.session_state.current_user = new_user
            st.rerun()
        
        st.markdown("---")
        
        # –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        col1, col2 = st.columns(2)
        with col1:
            st.metric("–ê–∫—Ç–∏–≤—ã", len(portfolio_dict))
        with col2:
            st.metric("–†–∏—Å–∫", client_data['risk_profile'])
        
        # –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
        display_subscription_status(current_client)
        
        st.markdown("---")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ AI
        st.subheader("ü§ñ –°–æ–≤–µ—Ç—ã")
        recommendations = generate_subscription_based_recommendations(current_client)
        for rec in recommendations[:2]:
            st.info(rec)
    
    # –û–°–ù–û–í–ù–û–ô –ö–û–ù–¢–ï–ù–¢
    
    # 1. –ü—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞
    st.subheader("üë§ –ü—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞")
    col1, col2 = st.columns(2)
    
    with col1:
        st.write(f"**–¢–∏–ø –ø–æ—Ä—Ç—Ñ–µ–ª—è:** {client_data['portfolio_type']}")
        st.write(f"**–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞:** {client_data['risk_profile']}")
        st.write(f"**–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –≥–æ—Ä–∏–∑–æ–Ω—Ç:** {client_data['investment_horizon']}")
    
    with col2:
        st.write(f"**–û–ø—ã—Ç:** {client_data['experience']}")
        st.write(f"**–¶–µ–ª—å:** {client_data['financial_goals']}")
        st.write(f"**–¶–µ–ª–µ–≤–∞—è —Å—É–º–º–∞:** {client_data['target_amount']:,.0f} ‚ÇΩ")
    
    # 2. –û–±–∑–æ—Ä –ø–æ—Ä—Ç—Ñ–µ–ª—è
    st.subheader("üìä –û–±–∑–æ—Ä –ø–æ—Ä—Ç—Ñ–µ–ª—è")
    weights_df = pd.DataFrame(list(portfolio_dict.items()), columns=['–ê–∫—Ç–∏–≤', '–î–æ–ª—è'])
    
    col1, col2 = st.columns([1, 2])
    
    with col1:
        fig_pie = px.pie(weights_df, values='–î–æ–ª—è', names='–ê–∫—Ç–∏–≤', hole=0.3)
        st.plotly_chart(fig_pie, use_container_width=True)
    
    with col2:
        st.dataframe(weights_df, use_container_width=True, hide_index=True)
    
    # 3. –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Å tooltip'–∞–º–∏
    st.subheader("üîç –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏")
    portfolio_metrics = create_portfolio_metrics(client_data, portfolio_dict, subscription_level)
    
    # –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        display_metric_with_tooltip(
            "–û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å", 
            f"{portfolio_metrics['expected_return']:.1%}", 
            'annual_return'
        )
    with col2:
        display_metric_with_tooltip(
            "–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å", 
            f"{portfolio_metrics['volatility']:.1%}", 
            'annual_volatility'
        )
    with col3:
        display_metric_with_tooltip(
            "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞", 
            f"{portfolio_metrics['sharpe_ratio']:.2f}", 
            'sharpe_ratio'
        )
    with col4:
        display_metric_with_tooltip(
            "–ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞", 
            f"{portfolio_metrics['max_drawdown']:.1%}", 
            'max_drawdown'
        )
    
    # –ë–µ—Ç–∞-–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        display_metric_with_tooltip(
            "–ë–µ—Ç–∞-–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç", 
            f"{portfolio_metrics.get('beta', 0):.2f}", 
            'beta'
        )
    
    # –ü–†–û–î–í–ò–ù–£–¢–´–ï –ú–ï–¢–†–ò–ö–ò (–¥–ª—è advanced –∏ premium)
    if subscription_level in ['advanced', 'premium']:
        st.subheader("üéØ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –º–µ—Ç—Ä–∏–∫–∏")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            display_metric_with_tooltip(
                "–ö–æ—ç—Ñ. –°–æ—Ä—Ç–∏–Ω–æ", 
                f"{portfolio_metrics.get('sortino_ratio', 0):.2f}", 
                'sortino_ratio'
            )
        
        with col2:
            display_metric_with_tooltip(
                "–ö–æ—ç—Ñ. –¢—Ä–µ–π–Ω–æ—Ä–∞", 
                f"{portfolio_metrics.get('treynor_ratio', 0):.3f}", 
                'treynor_ratio'
            )
        
        with col3:
            display_metric_with_tooltip(
                "–ú-–∫–≤–∞–¥—Ä–∞—Ç", 
                f"{portfolio_metrics.get('m_squared', 0):.3f}", 
                'm_squared'
            )
        
        with col4:
            display_metric_with_tooltip(
                "–ê–ª—å—Ñ–∞ –î–∂–µ–Ω—Å–µ–Ω–∞", 
                f"{portfolio_metrics.get('jensen_alpha', 0):.3f}", 
                'jensen_alpha'
            )
    
    # –ü–†–ï–ú–ò–£–ú –ú–ï–¢–†–ò–ö–ò (—Ç–æ–ª—å–∫–æ –¥–ª—è premium)
    if subscription_level == 'premium':
        st.subheader("üíé –ü—Ä–µ–º–∏—É–º –º–µ—Ç—Ä–∏–∫–∏")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            display_metric_with_tooltip(
                "–ö–æ—ç—Ñ. –ú–æ–¥–∏–ª—å—è–Ω–∏", 
                f"{portfolio_metrics.get('modigliani_ratio', 0):.3f}", 
                'modigliani_ratio'
            )
        
        with col2:
            display_metric_with_tooltip(
                "Information Ratio", 
                f"{portfolio_metrics.get('information_ratio', 0):.3f}", 
                'information_ratio'
            )
        
        with col3:
            display_metric_with_tooltip(
                "Tracking Error", 
                f"{portfolio_metrics.get('tracking_error', 0):.3f}", 
                'tracking_error'
            )
        
        with col4:
            display_metric_with_tooltip(
                "–ö–æ—ç—Ñ. –ö–∞–ª–º–∞—Ä–∞", 
                f"{portfolio_metrics.get('calmar_ratio', 0):.2f}", 
                'calmar_ratio'
            )
    
    # 4. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ AI - –†–ê–ó–ù–´–ï –î–õ–Ø –†–ê–ó–ù–´–• –ü–û–î–ü–ò–°–û–ö
    st.subheader("ü§ñ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ AI")
    
    recommendations = generate_subscription_based_recommendations(current_client)
    
    for rec in recommendations:
        st.info(rec)
    
    # –ü—Ä–µ–º–∏—É–º —Å–µ–∫—Ü–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤)
    if has_premium_access:
        st.subheader("üíé –ü—Ä–µ–º–∏—É–º –∞–Ω–∞–ª–∏—Ç–∏–∫–∞")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.success("""
            **ü§ñ AI –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º–µ—Å—è—Ü**
            - –û–∂–∏–¥–∞–µ–º—ã–π —Ä–æ—Å—Ç: +4.5%
            - –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: 78%
            - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –î–µ—Ä–∂–∞—Ç—å –ø–æ–∑–∏—Ü–∏–∏
            """)
        
        with col2:
            st.success("""
            **üèÜ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —ç—Ç–∞–ª–æ–Ω–∞–º–∏**
            - –í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å: +15.2%
            - S&P 500: +12.1%
            - Nasdaq: +18.3%
            """)
    elif has_advanced_access:
        # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É–ª—É—á—à–∏—Ç—å –¥–æ –ø—Ä–µ–º–∏—É–º
        st.info("üíé **AI-–ø—Ä–æ–≥–Ω–æ–∑—ã –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –ü—Ä–µ–º–∏—É–º —Ç–∞—Ä–∏—Ñ–µ**")
        if st.button("üíé –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –ü—Ä–µ–º–∏—É–º", key="upgrade_premium"):
            show_feature_unlock_prompt("AI-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞", "premium", current_client)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    init_session_state()
    
    if not st.session_state.authenticated:
        login_page()
    else:
        # –†–æ—É—Ç–∏–Ω–≥ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
        if st.session_state.current_page == "üìä –î–∞—à–±–æ—Ä–¥":
            dashboard_page()
        elif st.session_state.current_page == "üìà –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞":
            advanced_analytics_page()
        elif st.session_state.current_page == "üíé –¢–∞—Ä–∏—Ñ—ã":
            display_pricing_page()

if __name__ == "__main__":
    main()





