# app.py - –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è–º–∏

import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
import plotly.express as px
from datetime import datetime
import hashlib

# –ò–ú–ü–û–†–¢–ò–†–£–ï–ú –§–£–ù–ö–¶–ò–ò –ò–ó database.py
from database import (
    get_all_clients, 
    get_client_details, 
    get_portfolio_by_client, 
    generate_client_recommendations,
    get_complete_client_data,
    CLIENTS_DETAILED_DATA
)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É Streamlit
st.set_page_config(
    page_title="–Æ–Ω–∏–í–µ—Å—Ç - AI –°–æ–≤–µ—Ç–Ω–∏–∫ –ø–æ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

def hash_password(password):
    """–•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è"""
    return hashlib.sha256(password.encode()).hexdigest()

def init_session_state():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏"""
    if 'authenticated' not in st.session_state:
        st.session_state.authenticated = False
    if 'current_user' not in st.session_state:
        st.session_state.current_user = None
    if 'page' not in st.session_state:
        st.session_state.page = "login"
    if 'client_data' not in st.session_state:
        st.session_state.client_data = None
    if 'portfolio_data' not in st.session_state:
        st.session_state.portfolio_data = None

def login_page():
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞ - —Ç–æ–ª—å–∫–æ —Ñ–æ—Ä–º–∞ –≤—Ö–æ–¥–∞"""
    st.markdown("""
    <style>
        .login-container {
            max-width: 400px;
            margin: 150px auto;
            padding: 3rem;
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            text-align: center;
        }
        .main-title {
            font-size: 2.8rem;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            margin-bottom: 0.5rem;
            font-weight: bold;
        }
        .subtitle {
            color: #666;
            margin-bottom: 2rem;
            font-size: 1.2rem;
        }
    </style>
    """, unsafe_allow_html=True)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ HTML –≤–º–µ—Å—Ç–æ –∫–æ–ª–æ–Ω–æ–∫
    st.markdown("""
    <div style='display: flex; justify-content: center; align-items: center; min-height: 80vh;'>
        <div class="login-container">
            <h1 class="main-title">ü§ñ –Æ–Ω–∏–í–µ—Å—Ç</h1>
            <div class="subtitle">AI –°–æ–≤–µ—Ç–Ω–∏–∫ –ø–æ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º</div>
    """, unsafe_allow_html=True)
    
    # –ü—Ä–æ—Å—Ç–∞—è —Ñ–æ—Ä–º–∞ –≤—Ö–æ–¥–∞
    clients = get_all_clients()
    selected_client = st.selectbox(
        "üë§ –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞:",
        clients,
        index=0
    )
    
    password = st.text_input("üîí –ü–∞—Ä–æ–ª—å:", type="password", value="demo123")
    
    if st.button("üöÄ –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É", use_container_width=True, type="primary"):
        if password == "demo123":
            st.session_state.authenticated = True
            st.session_state.current_user = selected_client
            st.session_state.page = "dashboard"
            st.rerun()
        else:
            st.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'demo123'")
    
    st.markdown("""
            <div style="margin-top: 2rem; padding: 1rem; background: #f8f9fa; border-radius: 10px;">
                <p style="margin: 0; font-size: 0.9rem;"><strong>üí° –î–µ–º–æ-–¥–æ—Å—Ç—É–ø:</strong> –ü–∞—Ä–æ–ª—å: <code>demo123</code></p>
            </div>
        </div>
    </div>
    """, unsafe_allow_html=True)

# –û–°–¢–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –û–°–¢–ê–Æ–¢–°–Ø –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô
def create_portfolio_metrics(client_data, portfolio_dict):
    """–°–æ–∑–¥–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
    portfolio_type = client_data['portfolio_type']
    
    # –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π
    metrics_map = {
        '–∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π': {
            'expected_return': 0.18, 
            'volatility': 0.32, 
            'sharpe_ratio': 0.56, 
            'max_drawdown': -0.40,
            'diversification_score': 65
        },
        '—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π': {
            'expected_return': 0.095, 
            'volatility': 0.14, 
            'sharpe_ratio': 0.68, 
            'max_drawdown': -0.20,
            'diversification_score': 85
        },
        '–¥–æ—Ö–æ–¥–Ω—ã–π': {
            'expected_return': 0.078, 
            'volatility': 0.11, 
            'sharpe_ratio': 0.71, 
            'max_drawdown': -0.15,
            'diversification_score': 80
        },
        '—É–ª—å—Ç—Ä–∞-–∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π': {
            'expected_return': 0.045, 
            'volatility': 0.05, 
            'sharpe_ratio': 0.90, 
            'max_drawdown': -0.08,
            'diversification_score': 70
        }
    }
    
    return metrics_map.get(portfolio_type, metrics_map['—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π'])

def create_growth_chart(client_data, portfolio_type, current_client):
    """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ —Ä–æ—Å—Ç–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
    dates = pd.date_range(start='2021-01-01', end='2024-01-01', freq='M')
    
    # –†–∞–∑–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π
    returns_map = {
        '–∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π': {'mean': 0.015, 'std': 0.08},
        '—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π': {'mean': 0.008, 'std': 0.04},
        '–¥–æ—Ö–æ–¥–Ω—ã–π': {'mean': 0.006, 'std': 0.03},
        '—É–ª—å—Ç—Ä–∞-–∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π': {'mean': 0.004, 'std': 0.02}
    }
    
    return_profile = returns_map.get(portfolio_type, returns_map['—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π'])
    
    # –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∑–µ—Ä–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
    seed = sum(ord(c) for c in current_client)
    np.random.seed(seed)
    
    monthly_returns = np.random.normal(
        return_profile['mean'], 
        return_profile['std'], 
        len(dates)
    )
    
    initial = client_data['initial_investment']
    values = [initial]
    
    for ret in monthly_returns:
        values.append(values[-1] * (1 + ret))
    
    return dates, values[1:], initial

def dashboard_page():
    """–û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è - –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –°–¢–ò–õ–ò –î–õ–Ø –õ–£–ß–®–ï–ô –ß–ò–¢–ê–ï–ú–û–°–¢–ò
    st.markdown("""
    <style>
        /* –ë–µ–ª—ã–π —Ñ–æ–Ω –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è */
        .stApp {
            background-color: #ffffff !important;
        }
        
        /* –ß–µ—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç –≤–µ–∑–¥–µ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ */
        body, p, div, h1, h2, h3, h4, h5, h6, span, li, strong, em {
            color: #000000 !important;
        }
        
        .main-header {
            font-size: 2.5rem;
            color: #1f77b4 !important;
            text-align: center;
            margin-bottom: 1rem;
            font-weight: bold;
        }
        
        /* –ö–∞—Ä—Ç–æ—á–∫–∏ —Å –±–µ–ª—ã–º —Ñ–æ–Ω–æ–º –∏ —á–µ—Ä–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º */
        .client-card {
            background: #ffffff !important;
            color: #000000 !important;
            padding: 2rem;
            border-radius: 15px;
            margin: 1rem 0;
            border: 2px solid #1f77b4;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        }
        
        .metric-card {
            background: #f8f9fa !important;
            color: #000000 !important;
            padding: 1rem;
            border-radius: 10px;
            border-left: 4px solid #1f77b4;
            margin: 0.5rem 0;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }
        
        .user-info {
            background: #f8f9fa !important;
            color: #000000 !important;
            padding: 1rem;
            border-radius: 10px;
            margin: 0.5rem 0;
            border: 1px solid #dee2e6;
        }
        
        .recommendation-card {
            background: #f8f9fa !important;
            color: #000000 !important;
            padding: 1rem;
            border-radius: 10px;
            margin: 0.5rem 0;
            border-left: 4px solid #28a745;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }
        
        /* –£–ª—É—á—à–∞–µ–º —á–∏—Ç–∞–µ–º–æ—Å—Ç—å sidebar */
        .css-1d391kg {
            background-color: #f8f9fa !important;
        }
        
        /* –£–±–∏—Ä–∞–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–µ —Ñ–æ–Ω—ã */
        [style*="gradient"] {
            background: #ffffff !important;
        }
    </style>
    """, unsafe_allow_html=True)
    
    # –¢–µ–∫—É—â–∏–π –∫–ª–∏–µ–Ω—Ç
    current_client = st.session_state.current_user
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
    client_data = get_client_details(current_client)
    if not client_data:
        st.error(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞: {current_client}")
        st.stop()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª—å
    portfolio_dict = get_portfolio_by_client(current_client)
    if not portfolio_dict:
        st.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—å –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞: {current_client}")
        st.stop()
    
    # –•–µ–¥–µ—Ä —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
    col1, col2, col3 = st.columns([3, 1, 1])
    
    with col1:
        st.markdown(f'<div class="main-header">ü§ñ –Æ–Ω–∏–í–µ—Å—Ç - AI –°–æ–≤–µ—Ç–Ω–∏–∫ –ø–æ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º</div>', unsafe_allow_html=True)
    
    with col2:
        st.markdown(f'<div class="user-info">üë§ <strong>{current_client}</strong></div>', unsafe_allow_html=True)
    
    with col3:
        if st.button("üö™ –í—ã–π—Ç–∏", use_container_width=True):
            st.session_state.authenticated = False
            st.session_state.current_user = None
            st.session_state.page = "login"
            st.rerun()
    
    st.markdown("---")
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
    st.sidebar.title("üéØ –ù–∞–≤–∏–≥–∞—Ü–∏—è")
    
    # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    st.sidebar.subheader("üë• –ë—ã—Å—Ç—Ä–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ")
    all_clients = get_all_clients()
    current_index = all_clients.index(current_client) if current_client in all_clients else 0
    
    new_user = st.sidebar.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        all_clients,
        index=current_index,
        key="user_switch"
    )
    
    if new_user != current_client:
        st.session_state.current_user = new_user
        st.rerun()
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ —Å–∞–π–¥–±–∞—Ä–µ
    st.sidebar.markdown("---")
    st.sidebar.subheader(f"üìä –ü–æ—Ä—Ç—Ñ–µ–ª—å {current_client}")
    st.sidebar.write(f"**üíº –¢–∏–ø:** {client_data['portfolio_type']}")
    st.sidebar.write(f"**‚ö° –†–∏—Å–∫:** {client_data['risk_profile']}")
    st.sidebar.write(f"**üéØ –¶–µ–ª—å:** {client_data['financial_goals']}")
    st.sidebar.write(f"**üí∞ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏:** {client_data['initial_investment']:,.0f} ‚ÇΩ")
    st.sidebar.write(f"**üìä –ê–∫—Ç–∏–≤–æ–≤:** {len(portfolio_dict)}")
    st.sidebar.write(f"**üìÖ –ì–æ—Ä–∏–∑–æ–Ω—Ç:** {client_data['investment_horizon']}")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ AI
    st.sidebar.markdown("---")
    st.sidebar.subheader("ü§ñ AI –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    recommendations = generate_client_recommendations(current_client)
    for rec in recommendations[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 3 –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        st.sidebar.info(rec)
    
    # –û–°–ù–û–í–ù–û–ï –°–û–î–ï–†–ñ–ò–ú–û–ï –°–¢–†–ê–ù–ò–¶–´
    
    # 1. –ü—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞
    st.markdown(f"""
    <div class="client-card">
        <h2>üë§ {current_client}</h2>
        <p><em>{client_data['description']}</em></p>
        <div style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 1rem; margin-top: 1rem;">
            <div>
                <p><strong>üíº –¢–∏–ø –ø–æ—Ä—Ç—Ñ–µ–ª—è:</strong> {client_data['portfolio_type']}</p>
                <p><strong>üéØ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Ü–µ–ª—å:</strong> {client_data['financial_goals']}</p>
                <p><strong>üí∞ –¶–µ–ª–µ–≤–∞—è —Å—É–º–º–∞:</strong> {client_data['target_amount']:,.0f} ‚ÇΩ</p>
            </div>
            <div>
                <p><strong>‚ö° –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞:</strong> {client_data['risk_profile']}</p>
                <p><strong>üí™ –û–ø—ã—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</strong> {client_data['experience']}</p>
                <p><strong>üìÖ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –≥–æ—Ä–∏–∑–æ–Ω—Ç:</strong> {client_data['investment_horizon']}</p>
            </div>
            <div>
                <p><strong>üåê –î–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è:</strong> {client_data['diversification_level']}</p>
                <p><strong>üíº –ù–∞—á–∞–ª—å–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏:</strong> {client_data['initial_investment']:,.0f} ‚ÇΩ</p>
                <p><strong>üéØ –¢–æ–ª–µ—Ä–∞–Ω—Ç–Ω–æ—Å—Ç—å –∫ —Ä–∏—Å–∫—É:</strong> {client_data['risk_tolerance']:.0%}</p>
            </div>
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    # 2. –û–±–∑–æ—Ä –ø–æ—Ä—Ç—Ñ–µ–ª—è
    st.header("üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –æ–±–∑–æ—Ä –ø–æ—Ä—Ç—Ñ–µ–ª—è")
    
    col1, col2 = st.columns([1, 2])
    
    with col1:
        st.subheader("üçï –°–æ—Å—Ç–∞–≤ –ø–æ—Ä—Ç—Ñ–µ–ª—è")
        weights_df = pd.DataFrame(list(portfolio_dict.items()), columns=['–ê–∫—Ç–∏–≤', '–î–æ–ª—è'])
        
        fig_pie = px.pie(
            weights_df, 
            values='–î–æ–ª—è', 
            names='–ê–∫—Ç–∏–≤', 
            color_discrete_sequence=px.colors.sequential.RdBu,
            hole=0.3
        )
        fig_pie.update_traces(
            textposition='inside', 
            textinfo='percent+label',
            pull=[0.1 if i == 0 else 0 for i in range(len(portfolio_dict))]  # –í—ã–¥–µ–ª—è–µ–º –ø–µ—Ä–≤—ã–π –∞–∫—Ç–∏–≤
        )
        fig_pie.update_layout(showlegend=False)
        st.plotly_chart(fig_pie, use_container_width=True)
    
    with col2:
        st.subheader("üìà –î–µ—Ç–∞–ª–∏ –∞–∫—Ç–∏–≤–æ–≤")
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤—ã –ø–æ –¥–æ–ª–µ
        sorted_assets = sorted(portfolio_dict.items(), key=lambda x: x[1], reverse=True)
        
        # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        assets_df = pd.DataFrame(sorted_assets, columns=['–ê–∫—Ç–∏–≤', '–î–æ–ª—è'])
        assets_df['–î–æ–ª—è'] = assets_df['–î–æ–ª—è'].apply(lambda x: f'{x:.1%}')
        assets_df['–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏'] = assets_df['–î–æ–ª—è'].apply(
            lambda x: f"{client_data['initial_investment'] * float(x.strip('%'))/100:,.0f} ‚ÇΩ"
        )
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã
        st.dataframe(
            assets_df,
            use_container_width=True,
            hide_index=True
        )
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        col1, col2, col3 = st.columns(3)
        total_weight = sum(portfolio_dict.values())
        
        with col1:
            st.metric("–û–±—â–∞—è –¥–æ–ª—è –∞–∫—Ç–∏–≤–æ–≤", f"{total_weight:.1%}")
        with col2:
            st.metric("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–æ–≤", len(portfolio_dict))
        with col3:
            diversification_score = len(portfolio_dict) * 10 + 30  # –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞
            st.metric("–û—Ü–µ–Ω–∫–∞ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏", f"{diversification_score}/100")
        
        # –û—Ü–µ–Ω–∫–∞ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
        if len(portfolio_dict) < 4:
            st.error("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–∫—Ç–∏–≤–æ–≤ –¥–ª—è —Ö–æ—Ä–æ—à–µ–π –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏")
        elif len(portfolio_dict) < 6:
            st.warning("‚ö†Ô∏è –•–æ—Ä–æ—à–∞—è –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è, –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å")
        else:
            st.success("‚úÖ –û—Ç–ª–∏—á–Ω–∞—è –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è")
    
    # 3. –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è
    st.header("üîç –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∏ –∞–Ω–∞–ª–∏–∑")
    
    portfolio_metrics = create_portfolio_metrics(client_data, portfolio_dict)
    key_metrics = client_data.get('key_metrics', {})
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("–û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å", 
                 f"{key_metrics.get('expected_return', portfolio_metrics['expected_return']):.2%}",
                 help="–°—Ä–µ–¥–Ω–µ–≥–æ–¥–æ–≤–∞—è –æ–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å")
    with col2:
        st.metric("–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å", 
                 f"{key_metrics.get('volatility', portfolio_metrics['volatility']):.2%}",
                 help="–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏")
    with col3:
        st.metric("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞", 
                 f"{key_metrics.get('sharpe_ratio', portfolio_metrics['sharpe_ratio']):.2f}",
                 help="–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –Ω–∞ –µ–¥–∏–Ω–∏—Ü—É —Ä–∏—Å–∫–∞")
    with col4:
        st.metric("–ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞", 
                 f"{portfolio_metrics['max_drawdown']:.1%}",
                 help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞")
    
    # 4. –ì—Ä–∞—Ñ–∏–∫ —Ä–æ—Å—Ç–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è
    st.header("üìà –î–∏–Ω–∞–º–∏–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è –∑–∞ 3 –≥–æ–¥–∞")
    
    try:
        dates, values, initial = create_growth_chart(
            client_data, 
            client_data['portfolio_type'], 
            current_client
        )
        
        df = pd.DataFrame({'–î–∞—Ç–∞': dates, '–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è': values})
        fig = px.line(
            df, 
            x='–î–∞—Ç–∞', 
            y='–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è', 
            title=f'–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è –¥–∏–Ω–∞–º–∏–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è {current_client}',
            color_discrete_sequence=['#1f77b4']
        )
        fig.update_layout(
            xaxis_title="–î–∞—Ç–∞",
            yaxis_title="–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è (‚ÇΩ)",
            hovermode='x unified',
            showlegend=False
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—é –∫–∞–∫ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é
        fig.add_hline(
            y=initial, 
            line_dash="dash", 
            line_color="red",
            annotation_text=f"–ù–∞—á–∞–ª—å–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏: {initial:,.0f} ‚ÇΩ"
        )
        
        st.plotly_chart(fig, use_container_width=True)
        
        # –†–∞—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
        final_value = values[-1]
        total_growth = final_value - initial
        annualized_return = (final_value / initial) ** (1/3) - 1
        
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("–ù–∞—á–∞–ª—å–Ω–∞—è —Å—É–º–º–∞", f"{initial:,.0f} ‚ÇΩ")
        with col2:
            st.metric("–¢–µ–∫—É—â–∞—è —Å—É–º–º–∞", f"{final_value:,.0f} ‚ÇΩ")
        with col3:
            st.metric("–û–±—â–∏–π —Ä–æ—Å—Ç", f"{total_growth:,.0f} ‚ÇΩ")
        with col4:
            st.metric("–ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å", f"{annualized_return:.2%}")
            
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
    
    # 5. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    st.header("üë• –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è–º–∏")
    
    try:
        comparison_data = []
        for client in get_all_clients():
            if client != current_client:
                client_info = get_client_details(client)
                if client_info:
                    comparison_data.append({
                        '–ö–ª–∏–µ–Ω—Ç': client,
                        '–¢–∏–ø –ø–æ—Ä—Ç—Ñ–µ–ª—è': client_info['portfolio_type'],
                        '–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞': client_info['risk_profile'],
                        '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ (–º–ª–Ω ‚ÇΩ)': client_info['initial_investment'] / 1000000,
                        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–æ–≤': len(get_portfolio_by_client(client) or {}),
                        '–û–ø—ã—Ç': client_info['experience']
                    })
        
        if comparison_data:
            comparison_df = pd.DataFrame(comparison_data)
            
            # –°—Ç–∏–ª–∏–∑—É–µ–º —Ç–∞–±–ª–∏—Ü—É
            st.dataframe(
                comparison_df.style.format({
                    '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ (–º–ª–Ω ‚ÇΩ)': '{:.1f}'
                }),
                use_container_width=True
            )
        else:
            st.info("üìä –≠—Ç–æ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–∏—Å—Ç–µ–º–µ")
            
    except Exception as e:
        st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {e}")
    
    # 6. –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ AI
    st.header("ü§ñ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ AI")
    
    recommendations = generate_client_recommendations(current_client)
    for i, rec in enumerate(recommendations):
        st.markdown(f"""
        <div class="recommendation-card">
            <strong>üìå –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è {i+1}:</strong> {rec}
        </div>
        """, unsafe_allow_html=True)
    
    # –§—É—Ç–µ—Ä
    st.markdown("---")
    st.markdown("""
    <div style='text-align: center; color: #666;'>
        <p>ü§ñ –Æ–Ω–∏–í–µ—Å—Ç AI –°–æ–≤–µ—Ç–Ω–∏–∫ | –ú—É–ª—å—Ç–∏-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞</p>
        <p>üíº –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –≥–∞—Ä–∞–Ω—Ç–∏–µ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏</p>
        <p>üìä –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {}</p>
    </div>
    """.format(datetime.now().strftime("%d.%m.%Y %H:%M")), unsafe_allow_html=True)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    init_session_state()
    
    if not st.session_state.authenticated:
        login_page()
    else:
        dashboard_page()

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    main()
